{
    "version": "https://jsonfeed.org/version/1",
    "title": "Blog",
    "description": " ",
    "home_page_url": "https://josejuanmontiel.github.io/blog",
    "feed_url": "https://josejuanmontiel.github.io/blog/feed.json",
    "author" : {
    	"name": "JoseJuanMontiel",
    	"avatar": "https://josejuanmontiel.github.io/blog/img/main/avatar.png"
    },
    "items": [
        {
            "id": "https://josejuanmontiel.github.io/blog/2018/04/osgi-vs-jigsaw.es.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2018/04/osgi-vs-jigsaw.es.html",
            "date_published": "2018-04-01T00:00:00+02:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_osgi_vs_jigsaw\">Osgi vs Jigsaw<\/h2>\n<div class=\"sectionbody\">\n\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2018/03/prepare-a-talk.es.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2018/03/prepare-a-talk.es.html",
            "date_published": "2018-03-04T00:00:00+01:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "talk" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_prepare_a_talk\">Prepare a talk<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://groups.google.com/forum/\" class=\"bare\">https://groups.google.com/forum/<\/a><mark>!topic/madrid-gug/GPg3kamXDN4\n\t<a href=\"https://groups.google.com/forum/\" class=\"bare\">https://groups.google.com/forum/<\/a><\/mark>!msg/madrid-gug/GPg3kamXDN4/aTK8kMu2DQAJ<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://github.com/josejuanmontiel/charla_gradle\">Gradle<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/josejuanmontiel/thymeleaf_talk\">Thymeleaf<\/a>\n<a href=\"http://forum.thymeleaf.org/Thymeleaf-and-groovy-td4029599.html\" class=\"bare\">http://forum.thymeleaf.org/Thymeleaf-and-groovy-td4029599.html<\/a>\n<a href=\"https://twitter.com/nicolas_frankel/status/760441910272135168\" class=\"bare\">https://twitter.com/nicolas_frankel/status/760441910272135168<\/a><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2018/03/opencv.es.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2018/03/opencv.es.html",
            "date_published": "2018-03-03T00:00:00+01:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "graphics" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_opencv\">OpenCV<\/h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Escaneo de tickets<\/p>\n<\/li>\n<li>\n<p><a href=\"http://stackoverflow.com/questions/38618860/tess-two-receipt-recognitions-wide-font-and-different-font-size-give-me-bad-res\" class=\"bare\">http://stackoverflow.com/questions/38618860/tess-two-receipt-recognitions-wide-font-and-different-font-size-give-me-bad-res<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http://www.astrojack.com/scanning-and-ocr-ing-a-paper-receipt/\" class=\"bare\">http://www.astrojack.com/scanning-and-ocr-ing-a-paper-receipt/<\/a><\/p>\n<\/li>\n<li>\n<p>Ocr<\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/rmtheis/tess-two\" class=\"bare\">https://github.com/rmtheis/tess-two<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/tleyden/ocr-parking-ticket\" class=\"bare\">https://github.com/tleyden/ocr-parking-ticket<\/a><\/p>\n<\/li>\n<li>\n<p>Spring-boot<\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/arun0009/ocr-tess4j-rest\" class=\"bare\">https://github.com/arun0009/ocr-tess4j-rest<\/a><\/p>\n<\/li>\n<li>\n<p>Google Cloud<\/p>\n<\/li>\n<li>\n<p><a href=\"http://www.ideyatech.com/cloud-ocr-google-vision-api/\" class=\"bare\">http://www.ideyatech.com/cloud-ocr-google-vision-api/<\/a><\/p>\n<\/li>\n<li>\n<p>Image Panorama Stitching<\/p>\n<\/li>\n<li>\n<p><a href=\"http://answers.opencv.org/question/27681/image-stitching-java-api/\" class=\"bare\">http://answers.opencv.org/question/27681/image-stitching-java-api/<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http://devblog.michalski.im/2012/05/18/combine-multiple-video-frames-into-one-using-opencv/\" class=\"bare\">http://devblog.michalski.im/2012/05/18/combine-multiple-video-frames-into-one-using-opencv/<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://ramsrigoutham.com/2012/11/22/panorama-image-stitching-in-opencv/\" class=\"bare\">https://ramsrigoutham.com/2012/11/22/panorama-image-stitching-in-opencv/<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http://blog.blackhc.net/2010/07/panorama-stitching/\" class=\"bare\">http://blog.blackhc.net/2010/07/panorama-stitching/<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http://imagej.net/Image_Stitching\" class=\"bare\">http://imagej.net/Image_Stitching<\/a><\/p>\n<\/li>\n<li>\n<p>Java Image stiching<\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/bytedeco/sample-projects/tree/master/opencv-stitching\" class=\"bare\">https://github.com/bytedeco/sample-projects/tree/master/opencv-stitching<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/lessthanoptimal/BoofCV/tree/master/examples/src/boofcv/examples/geometry/ExampleImageStitching.java\" class=\"bare\">https://github.com/lessthanoptimal/BoofCV/tree/master/examples/src/boofcv/examples/geometry/ExampleImageStitching.java<\/a><\/p>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre>-<\/pre>\n<\/div>\n<\/div>\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2018/03/ddd.es.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2018/03/ddd.es.html",
            "date_published": "2018-03-02T00:00:00+01:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "ddd" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_ddd\">DDD<\/h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Meetup<\/p>\n<\/li>\n<li>\n<p><a href=\"https://www.meetup.com/es-ES/dddmadrid/events/237561762/\" class=\"bare\">https://www.meetup.com/es-ES/dddmadrid/events/237561762/<\/a><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2018/03/couch-db.es.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2018/03/couch-db.es.html",
            "date_published": "2018-03-01T00:00:00+01:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "jvm",   "db" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_couch_db\">Couch DB<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://pouchdb.com/guides/replication.html\" class=\"bare\">https://pouchdb.com/guides/replication.html<\/a>\n<a href=\"http://docs.couchdb.org/en/2.0.0/\" class=\"bare\">http://docs.couchdb.org/en/2.0.0/<\/a><\/p>\n<\/div>\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2018/02/thymeleaf.es.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2018/02/thymeleaf.es.html",
            "date_published": "2018-02-23T00:00:00+01:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "jvm",   "thymeleaf" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_charla_thymeleaf_para_maquetadores\">Charla: Thymeleaf para maquetadores.<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Retomar,\n- <a href=\"https://josejuanmontiel.github.io/blog/2016/10/groovy-thymelaf.es.html\" class=\"bare\">https://josejuanmontiel.github.io/blog/2016/10/groovy-thymelaf.es.html<\/a>\n- /home/jose/git/blog/src/jbake/content/2017/07/groovy-metaprograming.es.adoc<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_enfoque_usando_el_codigo_de_ejemplo\">Enfoque usando el codigo de ejemplo<\/h2>\n<div class=\"sectionbody\">\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><a href=\"https://github.com/josejuanmontiel/thymeleaf_talk\" class=\"bare\">https://github.com/josejuanmontiel/thymeleaf_talk<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/josejuanmontiel/adorable-avatar\" class=\"bare\">https://github.com/josejuanmontiel/adorable-avatar<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/josejuanmontiel/dynamic-rest-template\" class=\"bare\">https://github.com/josejuanmontiel/dynamic-rest-template<\/a><\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://github.com/josejuanmontiel/charla_gradle\">Gradle<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/josejuanmontiel/thymeleaf_talk\">Thymeleaf<\/a>\n<a href=\"http://forum.thymeleaf.org/Thymeleaf-and-groovy-td4029599.html\" class=\"bare\">http://forum.thymeleaf.org/Thymeleaf-and-groovy-td4029599.html<\/a>\n<a href=\"https://twitter.com/nicolas_frankel/status/760441910272135168\" class=\"bare\">https://twitter.com/nicolas_frankel/status/760441910272135168<\/a><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<\/ol>\n<\/div>\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2018/02/liferay.es.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2018/02/liferay.es.html",
            "date_published": "2018-02-16T00:00:00+01:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "jvm",   "liferay",   "osgi" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_liferay_and_osgi\">Liferay and OSGi<\/h2>\n<div class=\"sectionbody\">\n\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2018/02/jbake.es.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2018/02/jbake.es.html",
            "date_published": "2018-02-09T00:00:00+01:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "jvm",   "jbake" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_jbake\">JBake<\/h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>PR para Velocity&#8230;&#8203;<\/p>\n<\/li>\n<li>\n<p>Ajustar que apunte a css<\/p>\n<\/li>\n<li>\n<p>Descargar html final&#8230;&#8203;<\/p>\n<\/li>\n<li>\n<p>Probar inclusion de templates<\/p>\n<\/li>\n<li>\n<p>Probar inclusion usando lo que provee el tema<\/p>\n<\/li>\n<li>\n<p>Realizar esquema de jerarquia: tema &#8594; layout &#8594; portlet &#8594; contenido &#8594; template<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2018/02/hippocms.es.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2018/02/hippocms.es.html",
            "date_published": "2018-02-02T00:00:00+01:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "jvm",   "hippocms" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_hippocms\">HippoCMS<\/h2>\n<div class=\"sectionbody\">\n\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2017/11/testing-spock.es.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2017/11/testing-spock.es.html",
            "date_published": "2017-11-25T00:00:00+01:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "jvm",   "hippocms" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_testing_con_spock\">Testing con spock<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Nikolas frankel\n\t- mock\n\t- stubs\n\t- dobles..<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Ivan spock\n\t<a href=\"https://virtualjug.com/vjug24-session-testing-with-spock-the-logical-choice-by-ivan-lopez/\" class=\"bare\">https://virtualjug.com/vjug24-session-testing-with-spock-the-logical-choice-by-ivan-lopez/<\/a>\n\t<a href=\"https://github.com/ilopmar/virtualjug24-spock\" class=\"bare\">https://github.com/ilopmar/virtualjug24-spock<\/a><\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Spring - spock<\/p>\n<\/div>\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2017/11/graalvm.es.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2017/11/graalvm.es.html",
            "date_published": "2017-11-18T00:00:00+01:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "jvm" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_graalvm\">Graalvm<\/h2>\n<div class=\"sectionbody\">\n\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2017/11/cookies.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2017/11/cookies.html",
            "date_published": "2017-11-11T00:00:00+01:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "jvm",   "cookies" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_cookies\">cookies<\/h2>\n<div class=\"sectionbody\">\n<div id=\"main-classes\" class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/sample-plantuml-diagram.png\" alt=\"Class diagram\" width=\"135\" height=\"118\">\n<\/div>\n<div class=\"title\">Figure 1. The PlantUML block extension class<\/div>\n<\/div>\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2017/11/cookies.es.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2017/11/cookies.es.html",
            "date_published": "2017-11-11T00:00:00+01:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "jvm",   "cookies" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_cookies\">cookies<\/h2>\n<div class=\"sectionbody\">\n<div id=\"main-classes\" class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/sample-plantuml-diagram.png\" alt=\"Class diagram\" width=\"135\" height=\"118\">\n<\/div>\n<div class=\"title\">Figure 1. The PlantUML block extension class<\/div>\n<\/div>\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2017/11/gluon.es.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2017/11/gluon.es.html",
            "date_published": "2017-11-11T00:00:00+01:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "jvm",   "hippocms" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_gluon_oss\">Gluon OSS<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>OpenJdk Mobile - <a href=\"http://openjdk.java.net/projects/mobile/\" class=\"bare\">http://openjdk.java.net/projects/mobile/<\/a><\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Zero assambler project \t- <a href=\"http://openjdk.java.net/projects/zero/\" class=\"bare\">http://openjdk.java.net/projects/zero/<\/a>\n\t\t\t- <a href=\"http://icedtea.classpath.org/wiki/ZeroSharkFaq\" class=\"bare\">http://icedtea.classpath.org/wiki/ZeroSharkFaq<\/a><\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>cross tool chain\n\t- android - <a href=\"http://openjdk.java.net/projects/mobile/android.html\" class=\"bare\">http://openjdk.java.net/projects/mobile/android.html<\/a>\n\t- Ojo que tambien ios y windows phone<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>¿gluon vm?<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Compiling with jack - <a href=\"https://source.android.com/source/jack.html\" class=\"bare\">https://source.android.com/source/jack.html<\/a><\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Android vm\n\t- <a href=\"https://archon-runtime.github.io/\" class=\"bare\">https://archon-runtime.github.io/<\/a>\n\t- kivy \t- <a href=\"https://kivy.org/#home\" class=\"bare\">https://kivy.org/#home<\/a>\n\t\t- <a href=\"https://kivy.org/docs/guide/android.html\" class=\"bare\">https://kivy.org/docs/guide/android.html<\/a><\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Griffon y basilisk - <a href=\"http://jroller.com/aalmiray/entry/and_griffon_beget_basilisk\" class=\"bare\">http://jroller.com/aalmiray/entry/and_griffon_beget_basilisk<\/a><\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Basilisk - <a href=\"https://github.com/basilisk-fw/basilisk\" class=\"bare\">https://github.com/basilisk-fw/basilisk<\/a><\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Correo a Jose Pereda.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Hola,<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>hacia tiempo que no me pasaba&#8230;&#8203; pero entre que la mayor (mi hija de 7 años) esta con toses, y las ideas me bullen en la cabeza, no puedo dormir. Asi que voy a escribir un ladrillo para dejarlo todo ordenado ;)<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Lo primero un placer haber asistido al meetup y al workshop, se agradece el esfuerzo aunque no hubiera mucha asistencia&#8230;&#8203;<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>La verdad es que siempre había tenido en el radar JavaFX aunque no haya hecho profesionalmente nada, lo mas cercano una app de escritorio (hace 3 años) para manejo de \"proceso por lotes\" que al final fue en swing, y de ahi empece a trastear con android&#8230;&#8203; de hecho hasta di una charla en el MadridGUG <a href=\"http://www.madridgug.com/2014/06/madrid-gug-junio-2014-dropwizard-de.html\" class=\"bare\">http://www.madridgug.com/2014/06/madrid-gug-junio-2014-dropwizard-de.html<\/a> y finalmente publique mi \"app\" <a href=\"https://play.google.com/store/apps/details?id=com.accreativos.whatshappening\" class=\"bare\">https://play.google.com/store/apps/details?id=com.accreativos.whatshappening<\/a> que va a ser la candidata perfecta para la migracion a JavaFX y Gluon.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Eso me lleva al primer punto, a ver si me animo y hago una contribucion a <a href=\"https://bitbucket.org/gluon-oss/charm-down\" class=\"bare\">https://bitbucket.org/gluon-oss/charm-down<\/a> para ver si tiene sentido \"modelar el compartir\" como servicio dentro de charm-down, vamos el<\/p>\n<\/div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre>&lt;intent-filter&gt;\n &lt;action android:name=\"android.intent.action.SEND\" /&gt;\n &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;\n &lt;data android:mimeType=\"image/*\" /&gt;\n&lt;/intent-filter&gt;<\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>de android, y el equivalente de ios, que no se como seria&#8230;&#8203; modelar y evolucionar para customizar el tipo de cosas a poder \"capturar\" en el compartir, procesos internos de unificacion&#8230;&#8203;. y el propio codigo de \"captura en la clase android\"<\/p>\n<\/div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre>// if this is from the share menu\nif (Intent.ACTION_SEND.equals(action))\n{\n if (extras.containsKey(Intent.EXTRA_STREAM))\n {\n try\n {\n // Get resource path from intent callee\n Uri uri = (Uri) extras.getParcelable(Intent.EXTRA_STREAM);<\/pre>\n<\/div>\n<\/div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre>// Query gallery for camera picture via\n// Android ContentResolver interface\nContentResolver cr = getContentResolver();\nInputStream is = cr.openInputStream(uri);<\/pre>\n<\/div>\n<\/div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre>mAsyncTaskManager.setupTask(new Task(getResources(), is, uri.getPath()));<\/pre>\n<\/div>\n<\/div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre> return;\n } catch (Exception e) {\n writeMessage(e.toString());\n }\n } else if (extras.containsKey(Intent.EXTRA_TEXT)) {\n return;\n }\n}<\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Lo dicho con JavaFX, siempre en el punto de mira, y mas desde que asisto a los MadridGUG, tambien vi este meetup <a href=\"http://www.madridgug.com/2016/08/madrid-gug-septiembre-2016-groovy.html\" class=\"bare\">http://www.madridgug.com/2016/08/madrid-gug-septiembre-2016-groovy.html<\/a> y hace poco este <a href=\"https://virtualjug.com/the-javafx-ecosystem/\" class=\"bare\">https://virtualjug.com/the-javafx-ecosystem/<\/a><\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Lo que me lleva al segundo punto, este mas profesional, estoy metido en un \"proyecto\" que digamos va a tener una parte de dashboard que lo mismo lo planteo con JavaFX (ya que incluso se puede mezclar con jnlp <a href=\"http://docs.oracle.com/javafx/2/deployment/packaging.htm\" class=\"bare\">http://docs.oracle.com/javafx/2/deployment/packaging.htm<\/a>) ya vere, pero la potencia estaria que ademas tendriamos \"gratis (aprovechando el mismo esfuerzo)\" las moviles&#8230;&#8203; si sale adelante contactare contigo/gluonhd a nivel profesional.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Pues lo dicho, un placer y gracias.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Seguiremos en contacto.<\/p>\n<\/div>\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2017/07/groovy-metaprograming.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2017/07/groovy-metaprograming.html",
            "date_published": "2017-07-08T00:00:00+02:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "jvm",   "code",   "generation",   "groovy",   "thymeleaf" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_generation_of_code_from_the_model_to_the_view\">Generation of code. From the model to the view.<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Well, at last, more than 9 months after its beginning, I have encouraged to finish\nthis blog post, and it was after the tweet of <a href=\"https://twitter.com/jagedn/status/882984377596116992\">@jagedn<\/a>\nthat after the @ilopmar talk in <a href=\"http://www.madridgug.com/2017/06/madrid-gug-julio-2017-sacando-partido.html\">madridgug<\/a>,\nhe encouraged me with <a href=\"https://github.com/josejuanmontiel/asteroid/commit/9df7f079d25f183f7cade71900cce86264c9ed2f\">asteroid<\/a>.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>But hey, by order.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>In <a href=\"https://josejuanmontiel.github.io/blog/2016/10/groovy-thymelaf.es.html\">one<\/a>\nof my other articles, talked about how, using Groovy and Thymeleaf, one could\nto separate even a little more, the model of the view of where to place the\nbinding elements, to display model data; and leave some next steps,\nhow you could generate part of that code.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>And I will not talk about how to generate this code in this post, it should be more\nforward but at least, I will list a number of \"useful\" links to generate code.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>To date, there are many ways to \"generate code\". For example in\n<a href=\"http://www.genbetadev.com/paradigmas-de-programacion/metaprogramacion-en-compile-time-con-groovy\">this article<\/a>\nIvan tells us the options that are in groovy (at compile time, and in\nA previous one, those of execution time).<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>And in <a href=\"http://www.madridgug.com/2016/11/madrid-gug-diciembre-2016-macro-macro.html\">this talk<\/a>,\nMario, focuses on the aids that exist for Metaprogramming in groovy, macros.\nAnd it also tells us about a library to help us in this process of creating\nMacros: <a href=\"https://github.com/grooviter/asteroid\">asteroid<\/a><\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>If we had to make a classification, different, in different ways to create code\nwe could do it like this:<\/p>\n<\/div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Those of \"java\"<\/p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>The ones that you can see<\/p>\n<div class=\"olist lowerroman\">\n<ol class=\"lowerroman\" type=\"i\">\n<li>\n<p>Those that generate source code<\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Things like <a href=\"http://docs.spring.io/spring-roo/reference/html/intro.html\">Spring Roo<\/a>\nor <a href=\"http://yeoman.io\">Yeoman<\/a> or the most current <a href=\"https://jhipster.github.io/\">JHipster<\/a>\nare tools that generate code \"scaffolding\".<\/p>\n<\/li>\n<li>\n<p>But things like this library <a href=\"https://github.com/square/javapoet\">Javapoet<\/a>\ngenerates source code, from a DSL, and so we start from a common sources.<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<li>\n<p>Those that generate code \"compiled\". <a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/apt/\">APT<\/a>,\nIs the tool on which the \"rest\" that modifies the <a href=\"http://www.eclipse.org/articles/Article-JavaCodeManipulation_AST/\">AST<\/a>.<\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>By example, this library, <a href=\"https://github.com/AlbertoSH/MagicBuilder\">MagicBuilder<\/a> generate code at compile time, following the patron builder.<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<li>\n<p>Those that modify the bytecode<\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"http://asm.ow2.org/\">ASM4<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http://bytebuddy.net/#/\">ByteBuddy<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/raphw/byte-buddy/tree/master/byte-buddy-android\">ByteBuddy para Android<\/a><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<\/ol>\n<\/div>\n<\/li>\n<li>\n<p>Those that \"do not\" look<\/p>\n<div class=\"olist lowerroman\">\n<ol class=\"lowerroman\" type=\"i\">\n<li>\n<p>Those that use dependency injection.<\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>At the end declare a variable, and that in execution time it has been\nassigned a value, is also a way to modify the code. Here too Would have a place,\nthat kind of thing that, among others, makes Spring to generate the beans that\ninjects us through proxies for example.<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<li>\n<p><a href=\"https://eclipse.org/aspectj/\">AspectJ<\/a> / <a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html\">AOP<\/a><\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>This, somehow modifies the code / ast / bytecode, but the peculiarity\nis the way to define where these transformations are going to take place. Could\nconsidered a kind of global AST.<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<li>\n<p><a href=\"http://jnb.ociweb.com/jnb/jnbJan2010.html\">Lombock<\/a><\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>It is for those who can not use Groovy, at least, do not have they do\ncertain things that are always the same, like the getter / setter. This clearly\nenters in the AST field.<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<\/ol>\n<\/div>\n<\/li>\n<li>\n<p>Those that modify the code \"loaded\" in one \"environment\" by another<\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://zeroturnaround.com/software/jrebel/\">JRebel<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/spring-projects/spring-loaded\">spring-loaded<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html\">spring-dev-tools<\/a><\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>We see <a href=\"https://github.com/spring-projects/spring-boot/blob/1.4.x/spring-boot-integration-tests/spring-boot-devtools-tests/src/test/java/org/springframework/boot/devtools/tests/DevToolsIntegrationTests.java#L179-L188\">here<\/a>\nas for the tests of the latter have used ByteBuddy.<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<li>\n<p>Those that change the code in production through dinamic attach. <a href=\"https://www.sitepoint.com/fixing-bugs-in-running-java-code-with-dynamic-attach/\">Dynamic attach<\/a>.<\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>In this talk, we are told how to use <a href=\"http://www.madridgug.com/2015/11/codemotion-2015-jose-miguel-rodriguez.html\">YouDebug<\/a> as an interactive debugger in production.<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<li>\n<p>Those that compile code from sources in production. <a href=\"https://blog.frankel.ch/compilation-java-code-on-the-fly/#gsc.tab=0\">Compile sources en runtime<\/a>.<\/p>\n<\/li>\n<\/ol>\n<\/div>\n<\/li>\n<li>\n<p>The android world<\/p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>Assisted by gradle (with the APT plugin)<\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://google.github.io/dagger/users-guide\">Dagger<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http://jakewharton.github.io/butterknife/\">Butterknife<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http://androidannotations.org/\">Android Annotation<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/Arasthel/SwissKnife\">SwissKnife<\/a> for Groovy.<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<\/ol>\n<\/div>\n<\/li>\n<li>\n<p>Osgi vs Jigsaw\nHehe, well, this for another day :)<\/p>\n<\/li>\n<\/ol>\n<\/div>\n<div class=\"paragraph\">\n<p>And well, so you do not make \"ball\" this blog entry, simply reflect\n\"The different ways to\" generate code \"that exist in the world of the JVM (java, groovy) any more?<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_extra_ball\">Extra ball<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Some conversations in stackoverflow about android, groovy and code generation by APT<\/p>\n<\/div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><a href=\"http://stackoverflow.com/questions/31536234/android-annotations-multiple-paths-to-apt\" class=\"bare\">http://stackoverflow.com/questions/31536234/android-annotations-multiple-paths-to-apt<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http://stackoverflow.com/questions/30991656/what-its-the-first-the-annotated-class-egg-or-used-class-chicken\" class=\"bare\">http://stackoverflow.com/questions/30991656/what-its-the-first-the-annotated-class-egg-or-used-class-chicken<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http://stackoverflow.com/questions/31160831/android-groovy-android-annotation\" class=\"bare\">http://stackoverflow.com/questions/31160831/android-groovy-android-annotation<\/a><\/p>\n<\/li>\n<\/ol>\n<\/div>\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2017/07/groovy-metaprograming.es.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2017/07/groovy-metaprograming.es.html",
            "date_published": "2017-07-08T00:00:00+02:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "jvm",   "code",   "generation",   "groovy",   "thymeleaf" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_generacion_de_codigo_del_modelo_a_la_vista\">Generacion de codigo. Del modelo a la vista.<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Bueno, por fin, mas de 9 meses despues de su inicio, me he animado a terminar\nesta entrada del blog, y fue tras el tweet de <a href=\"https://twitter.com/jagedn/status/882984377596116992\">@jagedn<\/a>\nque despues de la charla de @ilopmar en <a href=\"http://www.madridgug.com/2017/06/madrid-gug-julio-2017-sacando-partido.html\">madridgug<\/a>,\nhizo que me animara con <a href=\"https://github.com/josejuanmontiel/asteroid/commit/9df7f079d25f183f7cade71900cce86264c9ed2f\">asteroid<\/a>.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Pero bueno, por orden.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>En <a href=\"https://josejuanmontiel.github.io/blog/2016/10/groovy-thymelaf.es.html\">uno<\/a>\nde mis anteriores artículos, hablaba de como, usando Groovy y Thymeleaf, se podía\nseparar aun un poco mas, la maqueta de las indicaciones de donde colocar los\nelementos de binding, para mostrar los datos del modelo; y deje planteado unos\npróximos pasos, de como se podía generar parte de ese código.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Y no voy a hablar de como generar ese codigo en este post, tendra que ser mas\nadelante pero por lo menos, dejare listadas una serie de herramientas \"utiles\"\npara generar codigo.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>A día de hoy, existen muchas maneras de \"generar codigo\". Por ejemplo, en\n<a href=\"http://www.genbetadev.com/paradigmas-de-programacion/metaprogramacion-en-compile-time-con-groovy\">este articulo<\/a>\nIvan nos cuenta las opciones que hay en groovy (en tiempo de compilacion, y en\nuno anterior, las de tiempo de ejecucion).<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Y en <a href=\"http://www.madridgug.com/2016/11/madrid-gug-diciembre-2016-macro-macro.html\">esta charla<\/a>,\nMario, se centra en las ayudas que existen para la Metaprogramacion en groovy, los macros.\nY también nos habla de una librería para ayudarnos en ese proceso de creacion de\nmacros: <a href=\"https://github.com/grooviter/asteroid\">asteroid<\/a><\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Si tuvieramos que hacer una clasificacion, diferente, de las distintas maneras\nde crear codigo podriamos hacerlo asi:<\/p>\n<\/div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Las de \"java\"<\/p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>Las que se ven<\/p>\n<div class=\"olist lowerroman\">\n<ol class=\"lowerroman\" type=\"i\">\n<li>\n<p>Las que generan codigo fuente<\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Cosas como <a href=\"http://docs.spring.io/spring-roo/reference/html/intro.html\">Spring Roo<\/a>\no <a href=\"http://yeoman.io\">Yeoman<\/a> o la mas actual <a href=\"https://jhipster.github.io/\">JHipster<\/a>\nson herramientas que generan codigo \"scaffolding\".<\/p>\n<\/li>\n<li>\n<p>Pero cosas como esta libreria <a href=\"https://github.com/square/javapoet\">Javapoet<\/a>\ngenera codigo fuente, a partir de un DSL, y asi partimos de unos fuentes comunes.<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<li>\n<p>Las que generan codigo \"compilado\". <a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/apt/\">APT<\/a>,\nes la herramienta en la que se basan el \"resto\" que modifcian el <a href=\"http://www.eclipse.org/articles/Article-JavaCodeManipulation_AST/\">AST<\/a>.<\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Por ejemplo, esta libreria, <a href=\"https://github.com/AlbertoSH/MagicBuilder\">MagicBuilder<\/a> genera codigo en tiempo de compilacion, siguiendo el patron builder.<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<li>\n<p>Las que modifican el bytecode<\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"http://asm.ow2.org/\">ASM4<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http://bytebuddy.net/#/\">ByteBuddy<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/raphw/byte-buddy/tree/master/byte-buddy-android\">ByteBuddy para Android<\/a><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<\/ol>\n<\/div>\n<\/li>\n<li>\n<p>Las que \"no\" se ven<\/p>\n<div class=\"olist lowerroman\">\n<ol class=\"lowerroman\" type=\"i\">\n<li>\n<p>Las que usan injeccion de dependencias.<\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Al final declarar una variable, y que en tiempo de ejecucion se le haya\nasignado un valor, tambien es una manera de modificar el codigo. Aqui tambien\ntendrian cabida, ese tipo de cosas que, entre otros, hace Spring para generar\nlos beans que nos injecta a traves de proxies por ejemplo.<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<li>\n<p><a href=\"https://eclipse.org/aspectj/\">AspectJ<\/a> / <a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html\">AOP<\/a><\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Esto, de alguna manera modifica el codigo/ast/bytecode, pero la peculiaridad\nes la manera de definir donde van a actuar estas transformaciones. Podrian\nconsiderarse una especie de AST Globales.<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<li>\n<p><a href=\"http://jnb.ociweb.com/jnb/jnbJan2010.html\">Lombock<\/a><\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Es para aquellos que no pueden usar Groovy, que por lo menos, no tengan\nque hacer ciertas cosas que siempre son igual, como los getter/setter. Esto si\nentra claramente dentro de las AST.<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<\/ol>\n<\/div>\n<\/li>\n<li>\n<p>Las que modifican el codigo \"cargado\" en un \"entorno\" por otro<\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://zeroturnaround.com/software/jrebel/\">JRebel<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/spring-projects/spring-loaded\">spring-loaded<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html\">spring-dev-tools<\/a><\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Vemos <a href=\"https://github.com/spring-projects/spring-boot/blob/1.4.x/spring-boot-integration-tests/spring-boot-devtools-tests/src/test/java/org/springframework/boot/devtools/tests/DevToolsIntegrationTests.java#L179-L188\">aqui<\/a>\ncomo para los test de esta ultima han usado ByteBuddy.<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<li>\n<p>Las que cambian el codigo en produccion mediante dinamic attach. <a href=\"https://www.sitepoint.com/fixing-bugs-in-running-java-code-with-dynamic-attach/\">Dynamic attach<\/a>.<\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>En esta charla, nos cuentan como usar <a href=\"http://www.madridgug.com/2015/11/codemotion-2015-jose-miguel-rodriguez.html\">YouDebug<\/a> como un depurador interactivo en produccion.<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<li>\n<p>Las que compilan codigo desde unos fuentes en produccion. <a href=\"https://blog.frankel.ch/compilation-java-code-on-the-fly/#gsc.tab=0\">Compile sources en runtime<\/a>.<\/p>\n<\/li>\n<\/ol>\n<\/div>\n<\/li>\n<li>\n<p>El mundo android<\/p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>Asistidas por gradle (con el plugin APT)<\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://google.github.io/dagger/users-guide\">Dagger<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http://jakewharton.github.io/butterknife/\">Butterknife<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http://androidannotations.org/\">Android Annotation<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://github.com/Arasthel/SwissKnife\">SwissKnife<\/a> para groovy.<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<\/ol>\n<\/div>\n<\/li>\n<li>\n<p>Osgi vs Jigsaw\nJeje, bueno, esto para otro dia :)<\/p>\n<\/li>\n<\/ol>\n<\/div>\n<div class=\"paragraph\">\n<p>Y bueno, para que no se haga \"bola\" esta entrada del blog, simplemente reflejar\n\"las distintas maneras de \"generar codigo\" que existen en el mundo de la JVM (java, groovy) ¿alguna mas?<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_bola_extra\">Bola extra<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Algunas conversaciones en stackoverflow sobre android, groovy y generacion de codigo por APT<\/p>\n<\/div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><a href=\"http://stackoverflow.com/questions/31536234/android-annotations-multiple-paths-to-apt\" class=\"bare\">http://stackoverflow.com/questions/31536234/android-annotations-multiple-paths-to-apt<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http://stackoverflow.com/questions/30991656/what-its-the-first-the-annotated-class-egg-or-used-class-chicken\" class=\"bare\">http://stackoverflow.com/questions/30991656/what-its-the-first-the-annotated-class-egg-or-used-class-chicken<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http://stackoverflow.com/questions/31160831/android-groovy-android-annotation\" class=\"bare\">http://stackoverflow.com/questions/31160831/android-groovy-android-annotation<\/a><\/p>\n<\/li>\n<\/ol>\n<\/div>\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2017/06/git.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2017/06/git.html",
            "date_published": "2017-06-30T00:00:00+02:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "git",   "merge",   "rebase",   "git-flow" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_git_merge_rebase_flow\">Git &amp; Merge &amp; Rebase &amp; Flow<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>On this occasion we will perform a series of operations on a git repository.\nWe will try to simulate typical situations of group work, with different\nWays to focus the union of the different jobs.<\/p>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_work_with_two_branches_without_common_ancestors\">Work with two branches without common ancestors.<\/h3>\n<div class=\"paragraph\">\n<p>First, initialize a local repo, with the option of being shared by\nMultiple users.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">cd ~/sandbox-git\ngit init --bare --shared ~/sandbox-git/test-repo.git\ngit clone test-repo.git repo-clone1\ngit clone test-repo.git repo-clone2<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Then we go to the directory 1, and we add a first file, in the commit\nWe indicate a username: User1.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">cd repo-clone1\ntouch README\ngit add .\ngit commit --author=\"User1 &lt;user1@git.com&gt;\" -m \"Initial commit\"\ngit push -u origin master<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>To view from console we can add the following to ~ / .gitconfig under [alias]<\/p>\n<\/div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-tip\" title=\"Tip\"><\/i>\n<\/td>\n<td class=\"content\">\ntree = log --graph --full-history --all --color --pretty=tformat:%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s%x20%x1b[33m(%an)%x1b[0m\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"paragraph\">\n<p>The repo is thus.<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_01.png\" alt=\"git 01\">\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Then we go to the second folder and we only do \"fetch\", and we create the same folder\nFile that the other user created. We did it, then we tried to push.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">cd ../repo-clone2\ngit fetch\nvi README\ngit add README\ngit commit --author=\"User2 &lt;user2@git.com&gt;\" -m \"Other user change\"\ngit push<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>But we get the following error.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">\t ! [rejected] master -&gt; master (non-fast-forward)\n\terror: failed to push some refs to '/home/jose/sandbox-git/test-repo.git'\n\thint: Updates were rejected because the tip of your current branch is behind\n\thint: its remote counterpart. Integrate the remote changes (e.g.\n\thint: 'git pull ...') before pushing again.\n\thint: See the 'Note about fast-forwards' in 'git push --help' for details.<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-warning\" title=\"Warning\"><\/i>\n<\/td>\n<td class=\"content\">\nYou can not push but you pull &#8230;&#8203; at this time the tree is like this &#8230;&#8203;\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_02.png\" alt=\"git 02\">\n<\/div>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git pull<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"admonitionblock caution\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-caution\" title=\"Caution\"><\/i>\n<\/td>\n<td class=\"content\">\nThe default behavior has changed since git 2.9\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"paragraph\">\n<p>\"git merge\" used to allow merging two branches that have no common base by default, which led to a brand new history of an existing project created and then get pulled by an unsuspecting maintainer, which allowed an unnecessary parallel history merged into the existing project. The command has been taught not to allow this by default, with an escape hatch --allow-unrelated-histories option to be used in a rare event that merges histories of two projects that started their lives independently.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>In this case, we have started from 2 independent branches, and the pull of a branch\n(Where we already have a commit) causes a kind of \"merge\". In this case (for\nNot having common ancestors) we must do it with:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git pull origin master --allow-unrelated-histories<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>And this is left<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_03.png\" alt=\"git 03\">\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Now we can do:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git push<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>And so is the repo:<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_04.png\" alt=\"git 04\">\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_work_in_a_branch_without_having_updated_it\">Work in a branch, without having updated it<\/h3>\n<div class=\"paragraph\">\n<p>Let&#8217;s now test in directory 1, create a git-flow feature, create a\nNew file and then &#8230;&#8203; create another feature in directory 2, creating another\nfile.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Then in directory 1, we close the feature, then in directory 2.<\/p>\n<\/div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-tip\" title=\"Tip\"><\/i>\n<\/td>\n<td class=\"content\">\nWe merge develop into our branch, and then merge our branch into develop (closing the feature).\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">cd ../repo-clone1\ngit flow init\ngit flow feature start user1\n\nvi feature-user1.txt\ngit add feature-user1.txt\ngit commit --author=\"User1 &lt;user1@git.com&gt;\" -m \"Commit in feature-user1\"<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_05.png\" alt=\"git 05\">\n<\/div>\n<\/div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-warning\" title=\"Warning\"><\/i>\n<\/td>\n<td class=\"content\">\nBut we \"forgot\" to do fetch / pull before we start &#8230;&#8203; and here begins the lesson &#8230;&#8203;\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git fetch\ngit pull origin master<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Now (about to finish the story) we have the tree as well.<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_06.png\" alt=\"git 06\">\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>We close feature<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git flow feature finish<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Summary of actions:<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>The feature branch 'feature/user1' was merged into 'develop'<\/p>\n<\/li>\n<li>\n<p>Feature branch 'feature/user1' has been locally deleted<\/p>\n<\/li>\n<li>\n<p>You are now on branch 'develop'<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-tip\" title=\"Tip\"><\/i>\n<\/td>\n<td class=\"content\">\nLet&#8217;s upload develop (by default git-flow does not push), which we have not done yet.\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git push origin develop<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Leaving the tree, like this:<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_07.png\" alt=\"git 07\">\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_keep_branch_updated_with_changes_from_develop\">Keep branch updated with changes from develop<\/h3>\n<div class=\"paragraph\">\n<p>Now we go to the directory 2, we update, create a feature,\nWe do something in the file README comiteamos, but before closing the feature,\nChange folder 1 and modify the README, we return to the original directory and\nBefore closing feature, mergeamos develop in our branch.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">cd ../repo-clone2\ngit fetch\ngit checkout develop\ngit pull\n\ngit flow init\n\ngit flow feature start user2\n\nvi feature-user2.txt\ngit add feature-user2.txt\ngit commit --author=\"User2 &lt;user2@git.com&gt;\" -m \"Commit in feature-user2\"\n\ncd ../repo-clone1\nvi feature-user1.txt\ngit add feature-user1.txt\ngit commit --author=\"User1 &lt;user1@git.com&gt;\" -m \"Update develop file feature1\"\ngit push origin develop<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Here (folder 1) we still do not know anything about the feature2, leaving the tree as well<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_08.png\" alt=\"git 08\">\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>The \"problem\" with overshoot is that it alters the story lines, for better or for worse.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>If we follow the classic approach, to keep our feature2 current, we must\nOften merge with develop, or at least, before closing the feature.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">cd ../repo-clone2\ngit fetch\ngit pull origin develop<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>This, as written, performs a direct merge, since we are pulling another\nBranch (develop) in the of the feature.<\/p>\n<\/div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-tip\" title=\"Tip\"><\/i>\n<\/td>\n<td class=\"content\">\nA pull of a branch in another that is not yours, is equivalent to a merge.\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_09.png\" alt=\"git 09\">\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_merge_after_a_pull_update_from_one_branch_to_another\">Merge, after a pull (update), from one branch to another<\/h3>\n<div class=\"paragraph\">\n<p>A way, from my point of view, more controlled to focus the merge (or\nEither by having a branch updated, or by mixing it later in another),\nCould have been: a fetch to update, changing to develop,\nDo pull and then return to the feature and doing merge.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_keep_branch_updated_with_an_override\">Keep branch updated with an override.<\/h3>\n<div class=\"paragraph\">\n<p>But, try again (we go to folder 1, we make change in develop and we raise it),\nBut this time we make a rebase (using git flow)<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">cd ../repo-clone1\nvi feature-user1.txt\ngit add feature-user1.txt\ngit commit --author=\"User1 &lt;user1@git.com&gt;\" -m \"Update develop file feature1\"\ngit push origin develop\ncd ../repo-clone2\ngit fetch\ngit flow feature rebase user2<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Will try to rebase 'user2' which is based on 'develop'&#8230;&#8203;\nFirst, rewinding head to replay your work on top of it&#8230;&#8203;\nApplying: Commit in feature-user2\nApplying: Update develop file feature1<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_10.png\" alt=\"git 10\">\n<\/div>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git flow feature finish<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Branches 'develop' and 'origin/develop' have diverged.\nFatal: And branch 'develop' may be fast-forwarded.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>This only means that the branch where we are working is not present (similar to the first example).<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git checkout develop\n\nSwitched to branch 'develop'\nYour branch is behind 'origin/develop' by 2 commits, and can be fast-forwarded.\n (use \"git pull\" to update your local branch)\n\ngit pull\nUpdating 408fcbf..f76cade\nFast-forward\n feature-user1.txt | 3 +++\n 1 file changed, 3 insertions(+)\n\ngit checkout feature/user2\nSwitched to branch 'feature/user2'\n\ngit flow feature finish\nSwitched to branch 'develop'\nYour branch is up-to-date with 'origin/develop'.\nAuto-merging feature-user1.txt\nCONFLICT (content): Merge conflict in feature-user1.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n\nThere were merge conflicts. To resolve the merge conflict manually, use:\n git mergetool\n git commit\n\nYou can then complete the finish by running it again:\n git flow feature finish user2<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>The rebase has generated conflicts, which at the time of making the merge, gives us problems.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git mergetool<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_11.png\" alt=\"git 11\">\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>It alters the timeline of the branch where it does it. We resolve the conflict and make changes.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git add feature-user1.txt\ngit commit --author=\"User2 &lt;user2@git.com&gt;\" -m \"Resolve rebase y merge\"\ngit push origin develop<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>We have this tree<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_12.png\" alt=\"git 12\">\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_git_tree_police\">Git tree police.<\/h3>\n<div class=\"paragraph\">\n<p>If we consider that a branch is created for a functionality, and the whole set\nOf commits that are related to it, including merge from develop, should not\nBe reflected in the final tree after the merge, --no-ff is our friend.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>We create a feature3, make some changes, make some changes in develop,\nLet&#8217;s take it to the branch of feature3, and when it&#8217;s done, merge with no-ff.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">cd ~/sandbox-git/repo-clone1\ngit fetch\ngit pull origin develop\n\ncd ~/sandbox-git/repo-clone2\ngit fetch\ngit pull origin develop\n\ngit flow feature start feature3\nvi feature3-user2.txt\ngit add feature3-user2.txt\ngit commit --author=\"User2 &lt;user2@git.com&gt;\" -m \"File from feature 3\"\n\ncd ~/sandbox-git/repo-clone1\nvi change-in-develop.txt\ngit add change-in-develop.txt\ngit commit --author=\"User1 &lt;user1@git.com&gt;\" -m \"change-in-develop\"\ngit push origin develop\n\ncd ~/sandbox-git/repo-clone2\ngit checkout develop\ngit fetch\ngit pull\ngit checkout feature/feature3\ngit merge develop<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>The tree we have so &#8230;&#8203; now after the merge, make another change and reintegrate\nIn develop as a single commit.<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_13.png\" alt=\"git 13\">\n<\/div>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">vi feature3-another-user2-file.txt\ngit add feature3-another-user2-file.txt\ngit commit --author=\"User2 &lt;user2@git.com&gt;\" -m \"File from feature 3\"\ngit checkout develop\ngit merge feature/feature3 --no-ff\ngit push origin --delete feature/feature3\ngit branch -d feature/feature3<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_14.png\" alt=\"git 14\">\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Let&#8217;s observe how clean the branch develop<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git-merge-no-ff.png\" alt=\"git merge no ff\">\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>References:<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa\" class=\"bare\">https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://coderwall.com/p/tnoiug/rebase-by-default-when-doing-git-pull\" class=\"bare\">https://coderwall.com/p/tnoiug/rebase-by-default-when-doing-git-pull<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://mislav.net/2013/02/merge-vs-rebase/\" class=\"bare\">https://mislav.net/2013/02/merge-vs-rebase/<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://www.atlassian.com/git/articles/git-team-workflows-merge-or-rebase\" class=\"bare\">https://www.atlassian.com/git/articles/git-team-workflows-merge-or-rebase<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http://blog.jonathanoliver.com/my-new-best-friend-git-merge-no-ff/\" class=\"bare\">http://blog.jonathanoliver.com/my-new-best-friend-git-merge-no-ff/<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http://paul.stadig.name/2010/12/thou-shalt-not-lie-git-rebase-ammend.html\" class=\"bare\">http://paul.stadig.name/2010/12/thou-shalt-not-lie-git-rebase-ammend.html<\/a><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2017/06/git.es.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2017/06/git.es.html",
            "date_published": "2017-06-30T00:00:00+02:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "git",   "merge",   "rebase",   "git-flow" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_git_merge_rebase_flow\">Git &amp; Merge &amp; Rebase &amp; Flow<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>En esta ocasion vamos a realizar una serie de operaciones en un repositorio git.\nIntentaremos simular situaciones tipicas de trabajo en grupo, con distintas\nmanerasP de enfocar la union de los distintos trabajos.<\/p>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_trabajar_con_dos_ramas_sin_ancestros_comunes\">Trabajar con dos ramas sin ancestros comunes.<\/h3>\n<div class=\"paragraph\">\n<p>Lo primero, inicializar un repo local, con opcion de que sea compartido por\nvarios usuarios.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">cd ~/sandbox-git\ngit init --bare --shared ~/sandbox-git/test-repo.git\ngit clone test-repo.git repo-clone1\ngit clone test-repo.git repo-clone2<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Despues nos vamos al directorio 1, y añadimos un primer fichero, en el commit\nindicamos un nombre de usuario: User1.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">cd repo-clone1\ntouch README\ngit add .\ngit commit --author=\"User1 &lt;user1@git.com&gt;\" -m \"Initial commit\"\ngit push -u origin master<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Para ver desde consola podemos añadir lo siguiente a ~/.gitconfig bajo [alias]<\/p>\n<\/div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-tip\" title=\"Tip\"><\/i>\n<\/td>\n<td class=\"content\">\ntree = log --graph --full-history --all --color --pretty=tformat:%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s%x20%x1b[33m(%an)%x1b[0m\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"paragraph\">\n<p>El repo queda entonces asi.<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_01.png\" alt=\"git 01\">\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Despues nos vamos a la segunda carpeta y solo hacemos \"fetch\", y creamos el mismo\nfichero que creo el otro usuario. Lo comiteamos, luego intentamos push.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">cd ../repo-clone2\ngit fetch\nvi README\ngit add README\ngit commit --author=\"User2 &lt;user2@git.com&gt;\" -m \"Other user change\"\ngit push<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Pero obtenemos el siguiente error.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">\t ! [rejected] master -&gt; master (non-fast-forward)\n\terror: failed to push some refs to '/home/jose/sandbox-git/test-repo.git'\n\thint: Updates were rejected because the tip of your current branch is behind\n\thint: its remote counterpart. Integrate the remote changes (e.g.\n\thint: 'git pull ...') before pushing again.\n\thint: See the 'Note about fast-forwards' in 'git push --help' for details.<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-warning\" title=\"Warning\"><\/i>\n<\/td>\n<td class=\"content\">\nNo se puede hacer push sino se hace un pull&#8230;&#8203; en este momento el arbol esta asi&#8230;&#8203;\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_02.png\" alt=\"git 02\">\n<\/div>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git pull<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"admonitionblock caution\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-caution\" title=\"Caution\"><\/i>\n<\/td>\n<td class=\"content\">\nThe default behavior has changed since git 2.9\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"paragraph\">\n<p>\"git merge\" used to allow merging two branches that have no common base by default, which led to a brand new history of an existing project created and then get pulled by an unsuspecting maintainer, which allowed an unnecessary parallel history merged into the existing project. The command has been taught not to allow this by default, with an escape hatch --allow-unrelated-histories option to be used in a rare event that merges histories of two projects that started their lives independently.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>En este caso, hemos partido de 2 ramas independientes, y el pull de una rama\n(donde ya tenemos un commit) provoca una especie de \"merge\". En este caso (por\n\tno tener ancestros comunes) debemos hacerlo con:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git pull origin master --allow-unrelated-histories<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Y queda esto<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_03.png\" alt=\"git 03\">\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Ahora ya podemos hacer:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git push<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Y asi queda el repo:<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_04.png\" alt=\"git 04\">\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_trabajar_en_una_rama_sin_haberla_actualizado\">Trabajar en una rama, sin haberla actualizado<\/h3>\n<div class=\"paragraph\">\n<p>Vamos ahora a probar en el directorio 1, a crear con git-flow una feature, crear un\nnuevo fichero y luego&#8230;&#8203; crear otra feature en el directorio 2, creando otro\nfichero.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Luego en el directorio 1, cerramos la feature, luego en el directorio 2,<\/p>\n<\/div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-tip\" title=\"Tip\"><\/i>\n<\/td>\n<td class=\"content\">\nMergeamos develop en nuestra rama, y luego mergeamos nuestra rama en develop (cerrando la feature).\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">cd ../repo-clone1\ngit flow init\ngit flow feature start user1\n\nvi feature-user1.txt\ngit add feature-user1.txt\ngit commit --author=\"User1 &lt;user1@git.com&gt;\" -m \"Commit in feature-user1\"<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_05.png\" alt=\"git 05\">\n<\/div>\n<\/div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-warning\" title=\"Warning\"><\/i>\n<\/td>\n<td class=\"content\">\nPero se nos \"olvido\" hacer fetch/pull antes de empezar&#8230;&#8203; y aqui empieza el lio&#8230;&#8203;\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git fetch\ngit pull origin master<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Ahora (a punto de terminar la historia) tenemos el arbol asi.<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_06.png\" alt=\"git 06\">\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Cerramos la feature<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git flow feature finish<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Summary of actions:<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>The feature branch 'feature/user1' was merged into 'develop'<\/p>\n<\/li>\n<li>\n<p>Feature branch 'feature/user1' has been locally deleted<\/p>\n<\/li>\n<li>\n<p>You are now on branch 'develop'<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-tip\" title=\"Tip\"><\/i>\n<\/td>\n<td class=\"content\">\nSubimos develop (por defecto git-flow no hace push), que aun no lo habiamos hecho.\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git push origin develop<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>quedando el arbol, asi:<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_07.png\" alt=\"git 07\">\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_mantener_rama_actualizada_con_los_cambios_de_develop\">Mantener rama actualizada con los cambios de develop<\/h3>\n<div class=\"paragraph\">\n<p>Ahora nos vamos al directorio 2, nos actualizamos, creamos una feature,\nhacemos algo en el fichero README comiteamos, pero antes de cerrar la feature,\ncambiamos de carpeta 1 y modificamos el README, volvemos al directorio original y\nantes de cerrar feature, mergeamos develop en nuestra rama.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">cd ../repo-clone2\ngit fetch\ngit checkout develop\ngit pull\n\ngit flow init\n\ngit flow feature start user2\n\nvi feature-user2.txt\ngit add feature-user2.txt\ngit commit --author=\"User2 &lt;user2@git.com&gt;\" -m \"Commit in feature-user2\"\n\ncd ../repo-clone1\nvi feature-user1.txt\ngit add feature-user1.txt\ngit commit --author=\"User1 &lt;user1@git.com&gt;\" -m \"Update develop file feature1\"\ngit push origin develop<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Aqui (carpeta 1) todavia no sabemos nada de la feature2, quedando el arbol asi<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_08.png\" alt=\"git 08\">\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>El \"problema\" con rebase es que altera las lineas de historia, para bien o para mal.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Si seguimos el enfoque clasico, para mantener al dia nuestra feature2, debemos\nmergear a menudo con develop, o por lo menos, antes de cerrar la feature.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">cd ../repo-clone2\ngit fetch\ngit pull origin develop<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Esto, asi escrito realiza un merge directo, pues estamos haciendo pull de otra\nrama (develop) en la de la feature.<\/p>\n<\/div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-tip\" title=\"Tip\"><\/i>\n<\/td>\n<td class=\"content\">\nUn pull de una rama en otra que no es la suya, equivale a un merge.\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_09.png\" alt=\"git 09\">\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_merge_tras_un_pull_actualizacion_de_una_rama_sobre_otra\">Merge, tras un pull (actualizacion), de una rama sobre otra<\/h3>\n<div class=\"paragraph\">\n<p>Una manera, desde mi punto de vista, mas controlada de enfocar los merge (o\n\tbien por tener actualizada una rama, o por mezclarla luego en otra),\n\tpodria haber sido: un fetch para actualiar, cambiando a develop,\nhacer pull y luego volviendo a la feature y haciendo merge.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_mantener_rama_actualizada_con_un_rebase\">Mantener rama actualizada con un rebase.<\/h3>\n<div class=\"paragraph\">\n<p>Pero, probemos otra vez (vamos a carpeta 1, hacemos cambio en develop y lo subimos),\npero esta vez hacemos un rebase (usando git flow)<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">cd ../repo-clone1\nvi feature-user1.txt\ngit add feature-user1.txt\ngit commit --author=\"User1 &lt;user1@git.com&gt;\" -m \"Update develop file feature1\"\ngit push origin develop\ncd ../repo-clone2\ngit fetch\ngit flow feature rebase user2<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Will try to rebase 'user2' which is based on 'develop'&#8230;&#8203;\nFirst, rewinding head to replay your work on top of it&#8230;&#8203;\nApplying: Commit in feature-user2\nApplying: Update develop file feature1<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_10.png\" alt=\"git 10\">\n<\/div>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git flow feature finish<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Branches 'develop' and 'origin/develop' have diverged.\nFatal: And branch 'develop' may be fast-forwarded.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Esto solo quiere decir que la rama donde estamos tabajando no esta actulzada (similar\n\tal primer ejemplo).<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git checkout develop\n\nSwitched to branch 'develop'\nYour branch is behind 'origin/develop' by 2 commits, and can be fast-forwarded.\n (use \"git pull\" to update your local branch)\n\ngit pull\nUpdating 408fcbf..f76cade\nFast-forward\n feature-user1.txt | 3 +++\n 1 file changed, 3 insertions(+)\n\ngit checkout feature/user2\nSwitched to branch 'feature/user2'\n\ngit flow feature finish\nSwitched to branch 'develop'\nYour branch is up-to-date with 'origin/develop'.\nAuto-merging feature-user1.txt\nCONFLICT (content): Merge conflict in feature-user1.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n\nThere were merge conflicts. To resolve the merge conflict manually, use:\n git mergetool\n git commit\n\nYou can then complete the finish by running it again:\n git flow feature finish user2<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>El rebase nos ha generado conflictos, que a la hora de hacer el merge, nos da problemas.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git mergetool<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_11.png\" alt=\"git 11\">\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Pues altera la linea de tiempo de la rama donde lo hace. Resolvemos el conflicto y subimos cambios.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">git add feature-user1.txt\ngit commit --author=\"User2 &lt;user2@git.com&gt;\" -m \"Resolve rebase y merge\"\ngit push origin develop<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Nos queda este arbol<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_12.png\" alt=\"git 12\">\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_policia_del_arbol_de_git\">Policia del arbol de git.<\/h3>\n<div class=\"paragraph\">\n<p>Si consideramos que una rama se crea para una funcionalidad, y todo el conjunto\nde commits que se relizan en ella, incluyendo los merge desde develop, no deben\nquedar reflejado en el arbolo final tras el merge, --no-ff es nuestro amigo.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Creemos una feature3, hagamos algun cambio, hagamos algun cambio en develop,\nllevemoslo a la rama de la feature3, y cuando terminemos, merge con no-ff.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">cd ~/sandbox-git/repo-clone1\ngit fetch\ngit pull origin develop\n\ncd ~/sandbox-git/repo-clone2\ngit fetch\ngit pull origin develop\n\ngit flow feature start feature3\nvi feature3-user2.txt\ngit add feature3-user2.txt\ngit commit --author=\"User2 &lt;user2@git.com&gt;\" -m \"File from feature 3\"\n\ncd ~/sandbox-git/repo-clone1\nvi change-in-develop.txt\ngit add change-in-develop.txt\ngit commit --author=\"User1 &lt;user1@git.com&gt;\" -m \"change-in-develop\"\ngit push origin develop\n\ncd ~/sandbox-git/repo-clone2\ngit checkout develop\ngit fetch\ngit pull\ngit checkout feature/feature3\ngit merge develop<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>El arbol lo tenemos asi&#8230;&#8203; ahora tras el merge, hagamos otro cambio y reintegremos\nen develop como un solo commit.<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_13.png\" alt=\"git 13\">\n<\/div>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-sh\" data-lang=\"sh\">vi feature3-another-user2-file.txt\ngit add feature3-another-user2-file.txt\ngit commit --author=\"User2 &lt;user2@git.com&gt;\" -m \"File from feature 3\"\ngit checkout develop\ngit merge feature/feature3 --no-ff\ngit push origin --delete feature/feature3\ngit branch -d feature/feature3<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git_14.png\" alt=\"git 14\">\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Observemos como queda limpio la rama develop<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/blog/img/git-merge-no-ff.png\" alt=\"git merge no ff\">\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Referencias:<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa\" class=\"bare\">https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://coderwall.com/p/tnoiug/rebase-by-default-when-doing-git-pull\" class=\"bare\">https://coderwall.com/p/tnoiug/rebase-by-default-when-doing-git-pull<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://mislav.net/2013/02/merge-vs-rebase/\" class=\"bare\">https://mislav.net/2013/02/merge-vs-rebase/<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://www.atlassian.com/git/articles/git-team-workflows-merge-or-rebase\" class=\"bare\">https://www.atlassian.com/git/articles/git-team-workflows-merge-or-rebase<\/a><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2016/10/retrolambda.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2016/10/retrolambda.html",
            "date_published": "2016-10-19T00:00:00+02:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "jvm",   "retrolambda",   "hippocms",   "android",   "apt" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_retrolambda_and_hippo_cms\">Retrolambda and Hippo Cms<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://code.onehippo.org/cms-community/hippo-cms\">This project<\/a> can only be compiled with the JDK 8 as it makes heavy use of its features: lambdas, default methods and more.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Thanks to <a href=\"https://github.com/orfjackal/retrolambda\">Retrolambda<\/a>, many projects that make use of the new features of JDK 8 can be migrated to JDK7 (and earlier) and therefore also to Android, where primary use is made this tool.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>And with <a href=\"https://github.com/orfjackal/retrolambda#maven-plugin\">this maven plugin<\/a> you can integrate it into your buildsystem. <a href=\"https://github.com/orfjackal/retrolambda/blob/master/end-to-end-tests/pom.xml\">Here is<\/a> an example of how to use it. And besides, there is another <a href=\"https://github.com/evant/gradle-retrolambda\">for Gradle<\/a>.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_limitations\">Limitations<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>But there are some well known <a href=\"https://github.com/orfjackal/retrolambda#known-limitations\">limitations<\/a>, which makes the migration of the default method of JDK 8 are not so easy, \"must to be backported together, with one execution of Retrolambda\".<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>So <a href=\"http://orfjackal.github.io/retrolambda/retrolambda-maven-plugin/process-main-mojo.html\">by default<\/a> is disabled in the migration.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>When Retrolmambda migrates <a href=\"https://github.com/orfjackal/retrolambda#backported-language-features\">Default Methods<\/a>:\nDefault methods are backported by copying the default methods to a companion class (interface name + \"$\") as static methods, replacing the default methods in the interface with abstract methods, and by adding the Necessary method Implementations to all classes which implement that interface.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_retrolambda_and_hippocms\">Retrolambda (and HippoCms)<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Take, for example, <a href=\"https://code.onehippo.org/cms-community/hippo-cms\">the following<\/a> project.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Suppose that initially have this interface module with the default method.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-java\" data-lang=\"java\">public interface IconProvider extends IClusterable {\n\tdefault Component getIcon(final String id, IconSize size) {\n\t\treturn null;\n\t}\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Retrolambda what makes this class is transformed into this one.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-java\" data-lang=\"java\">public abstract interface IconProvider2 extends IClusterable {\n public abstract Component getIcon(String paramString, IconSize paramIconSize);\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>And implements that method (through the \"companion class\") in classes that implement the interface, classes in the same module.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Therefore, if not process all child classes that interface module in the past, and will not, so&#8230;&#8203;<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-java\" data-lang=\"java\">public class SearchingSectionPlugin extends RenderPlugin implements IBrowserSection<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>this in another module, trying to be compiled gives this error<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-java\" data-lang=\"java\">[ERROR] /hippo-cms/perspectives/src/main/java/org/hippoecm/frontend/plugins/cms/browse/section/SearchingSectionPlugin.java:[63,7]\n\terror: SearchingSectionPlugin is not abstract and does not override abstract method getIcon(String,IconSize) in IconProvider<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_first_conclusions\">First conclusions<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>At first, unread well the error message, and without understanding the class hierarchy of the project, I thought it might help <a href=\"https://github.com/orfjackal/retrolambda/pull/101\">this PR<\/a><\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>If you want to understand more in detail, <a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Setting_Up_Your_Project_to_Use_the_Build_Lifecycle\">here<\/a> some notes on the Lifecycle of maven. And <a href=\"http://maven.apache.org/guides/mini/guide-maven-classloading.html\">here<\/a> on classloading.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Then read more in detail, I thought the problem was that the transformation the interface to abstract &#8230;&#8203; well, i admit <a href=\"https://twitter.com/nicolas_frankel/status/786202575150407680\">this tweet<\/a> had distracted me from the real problem, because <a href=\"https://stackoverflow.com/questions/7202616/java-abstract-interface/7202659#7202659\">\tthe interfaces are abstract (by default)<\/a>.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>And the own <a href=\"https://twitter.com/orfjackal\">Esko Luontola<\/a> explains why. \"8 pre-Java JVMs support only abstract methods in interfaces (the &lt;clinit&gt; method being an exception). Retrolambda code inserts the default method implementing to all classes, JVM 8 thus emulating what does.\"<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p><a href=\"https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html\">Here<\/a> a more detailed explanation of how to operate the Default Methods in JDK 8. And <a href=\"https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html\">here<\/a> oracle&#8217;s explanation on \"abstract\".<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_explanation_of_the_real_problem\">Explanation of the real problem<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>But the problem, in this case, was simply the limitation of the library in multi module projects <a href=\"https://github.com/orfjackal/retrolambda/issues/56\">here<\/a> and\n<a href=\"https://github.com/orfjackal/retrolambda/issues/58\">here<\/a> as also discussed in detail.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>A way out by making small manual changes in the code, it would be implementing the method getIcon(String, IconSize) with the default behavior in class the second module.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-bash\" data-lang=\"bash\">diff --git a/perspectives/src/main/java/org/hippoecm/frontend/plugins/cms/browse/section/BrowsingSectionPlugin.java b/perspectives/src/main/java/org/hippoecm/frontend/plugins/cms/browse/section/BrowsingSectionPlugin.java\nindex 99bdb0e..9b34ce1 100644\n--- a/perspectives/src/main/java/org/hippoecm/frontend/plugins/cms/browse/section/BrowsingSectionPlugin.java\n+++ b/perspectives/src/main/java/org/hippoecm/frontend/plugins/cms/browse/section/BrowsingSectionPlugin.java\n@@ -18,6 +18,7 @@\n import javax.jcr.Node;\n import javax.jcr.RepositoryException;\n\n+import org.apache.wicket.Component;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.request.resource.ResourceReference;\n import org.hippoecm.frontend.l10n.ResourceBundleModel;\n@@ -144,4 +145,10 @@\n return null;\n }\n\n+ @Override\n+ public Component getIcon(String id, IconSize size) {\n+ \treturn null;\n+ }\n+\n+\n }\ndiff --git a/perspectives/src/main/java/org/hippoecm/frontend/plugins/cms/browse/section/SearchingSectionPlugin.java b/perspectives/src/main/java/org/hippoecm/frontend/plugins/cms/browse/section/SearchingSectionPlugin.java\nindex 450712b..9d09210 100644\n--- a/perspectives/src/main/java/org/hippoecm/frontend/plugins/cms/browse/section/SearchingSectionPlugin.java\n+++ b/perspectives/src/main/java/org/hippoecm/frontend/plugins/cms/browse/section/SearchingSectionPlugin.java\n@@ -56,6 +56,7 @@\n import org.hippoecm.frontend.service.IconSize;\n import org.hippoecm.frontend.service.render.RenderPlugin;\n import org.hippoecm.frontend.skin.Icon;\n+import org.hippoecm.frontend.skin.IconProvider;\n import org.hippoecm.repository.api.HippoNodeType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -337,6 +338,11 @@\n public ResourceReference getIcon(IconSize type) {\n return null;\n }\n+\n+ @Override\n+ public Component getIcon(String id, IconSize size) {\n+ \treturn null;\n+ }\n\n private boolean hasSearchResult() {\n return collection.getType() == DocumentCollectionType.SEARCHRESULT;<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_next_steps\">Next steps?<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/teras\">Teras<\/a> and <a href=\"https://github.com/orfjackal\">Orfjackal<\/a>, why the PR 101 does not modify these classes to make that change? Maybe it does because there is already a method with that name, although not with the same number of parameters?<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_and_what_happend_with_the_retrolambda_compilation_of_hippocms\">And what happend with the retrolambda compilation of HippoCms?<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Even some mistake &#8230;&#8203; we have to solve static method &#8230;&#8203;<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-bash\" data-lang=\"bash\">[ERROR] hippo-cms/workflow/frontend/src/main/java/org/hippoecm/frontend/plugins/reviewedactions/list/ReviewedActionsListColumnProviderPlugin.java:[72,38] error: cannot find symbol\n[ERROR] symbol: method of(Calendar)\n[ERROR] location: interface DateTimePrinter\n[ERROR] hippo-cms/workflow/frontend/src/main/java/org/hippoecm/frontend/plugins/reviewedactions/list/ReviewedActionsListColumnProviderPlugin.java:[79,38] error: cannot find symbol\n[ERROR] symbol: method of(Calendar)\n[ERROR] location: interface DateTimePrinter<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Static methods on interfaces are backported by moving the static methods to a companion class (interface name + \"$\"), and by changing all methods calls to call the new method location.[1]<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>In this case, the temporary solution is to change the import in the classes of the second module, the companion class.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-bash\" data-lang=\"bash\">diff --git a/workflow/frontend/src/main/java/org/hippoecm/frontend/plugins/reviewedactions/RequestsView.java b/workflow/frontend/src/main/java/org/hippoecm/frontend/plugins/reviewedactions/RequestsView.java\nindex 5a97066..ab938b7 100644\n--- a/workflow/frontend/src/main/java/org/hippoecm/frontend/plugins/reviewedactions/RequestsView.java\n+++ b/workflow/frontend/src/main/java/org/hippoecm/frontend/plugins/reviewedactions/RequestsView.java\n@@ -41,7 +41,7 @@\n import org.hippoecm.frontend.plugin.IPluginContext;\n import org.hippoecm.frontend.plugins.reviewedactions.model.Request;\n import org.hippoecm.frontend.plugins.reviewedactions.model.RequestModel;\n-import org.hippoecm.frontend.plugins.standards.datetime.DateTimePrinter;\n+import org.hippoecm.frontend.plugins.standards.datetime.DateTimePrinter$;\n import org.hippoecm.frontend.plugins.standards.icon.HippoIcon;\n import org.hippoecm.frontend.session.UserSession;\n import org.hippoecm.frontend.skin.Icon;\n@@ -110,7 +110,7 @@\n String state = request.getState();\n\n final String parameter = schedule != null ?\n- DateTimePrinter.of(schedule).appendDST().print(FormatStyle.FULL) : \"??\";\n+ DateTimePrinter$.of(schedule).appendDST().print(FormatStyle.FULL) : \"??\";\n return new StringResourceModel(\"state-\" + state, this, null, \"unknown\", parameter);\n }<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_final_notes\">Final notes<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you&#8217;ve used in your project with JDK 8 are streaming APIs, you can use <a href=\"https://sourceforge.net/projects/streamsupport/\">this<\/a>.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Here is a <a href=\"https://en.wikipedia.org/wiki/Java_backporting_tools\">brief history<\/a>.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_extra_ball\">Extra ball<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"http://stackoverflow.com/questions/31160831/android-groovy-android-annotation\">Groovy Android and APT<\/a><\/p>\n<\/div>\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2016/10/retrolambda.es.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2016/10/retrolambda.es.html",
            "date_published": "2016-10-19T00:00:00+02:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "jvm",   "retrolambda",   "hippocms",   "android",   "apt" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_retrolambda_e_hippo_cms\">Retrolambda e Hippo Cms<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://code.onehippo.org/cms-community/hippo-cms\">Este proyecto<\/a>, solo se puede compilar con la JDK 8, ya que hace uso intensivo de sus caracteristicas: lambdas, default methods y otras mas.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Gracias a <a href=\"https://github.com/orfjackal/retrolambda\">Retrolambda<\/a>, muchos proyectos que hacen uso de las nuevas caracteristicas de JDK 8 pueden migrarse a JDK7 (y anteriores) y por tanto tambien a Android, lugar donde se hace principal uso de esta herramienta.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Y con <a href=\"https://github.com/orfjackal/retrolambda#maven-plugin\">este pluging maven<\/a> puedes integrarlo en tu buildsystem. <a href=\"https://github.com/orfjackal/retrolambda/blob/master/end-to-end-tests/pom.xml\">Aqui<\/a> un ejemplo de como usarlo. Y ademas, hay otro <a href=\"https://github.com/evant/gradle-retrolambda\">para gradle<\/a>.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_limitaciones\">Limitaciones<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Pero hay unas <a href=\"https://github.com/orfjackal/retrolambda#known-limitations\">limitaciones bien conocidas<\/a>, que hacen que la migracion de los default method de JDK 8 no sean tan faciles, \"must to be backported together, with one execution of Retrolambda\".<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Por eso, <a href=\"http://orfjackal.github.io/retrolambda/retrolambda-maven-plugin/process-main-mojo.html\">por defecto<\/a>, viene deshabilitada su migracion.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Cuando Retrolmambda migra las <a href=\"https://github.com/orfjackal/retrolambda#backported-language-features\">Default Methods<\/a>:\nDefault methods are backported by copying the default methods to a companion class (interface name + \"$\") as static methods, replacing the default methods in the interface with abstract methods, and by adding the necessary method implementations to all classes which implement that interface.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_retrolambda_e_hippocms\">Retrolambda (e HippoCms)<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Tomemos como ejemplo, <a href=\"https://code.onehippo.org/cms-community/hippo-cms\">el siguiente<\/a> proyecto.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Supongamos que en un primer modulo tenemos esta interfaz con el default method.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-java\" data-lang=\"java\">public interface IconProvider extends IClusterable {\n\tdefault Component getIcon(final String id, IconSize size) {\n\t\treturn null;\n\t}\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Retrolambda lo que hace con esta clase es transformarla en esta otra.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-java\" data-lang=\"java\">public abstract interface IconProvider2 extends IClusterable {\n public abstract Component getIcon(String paramString, IconSize paramIconSize);\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>E implementa ese metodo (a traves de la \"companion class\") en las clases que implementen la interfaz, de las clases del mismo modulo.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Por tanto, si no procesa todas las clases hijas de esa interfaz en la pasada del modulo, ya no lo hara, por lo que&#8230;&#8203;<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-java\" data-lang=\"java\">public class SearchingSectionPlugin extends RenderPlugin implements IBrowserSection<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>que esta en otro modulo, al intentar ser compilada da este error<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-java\" data-lang=\"java\">[ERROR] /hippo-cms/perspectives/src/main/java/org/hippoecm/frontend/plugins/cms/browse/section/SearchingSectionPlugin.java:[63,7]\n\terror: SearchingSectionPlugin is not abstract and does not override abstract method getIcon(String,IconSize) in IconProvider<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_primeras_conclusiones\">Primeras conclusiones<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>En un primer momento, sin leer bien el mensaje de error, y sin comprender la jerarquia de clases del proyecto, pense que <a href=\"https://github.com/orfjackal/retrolambda/pull/101\">este pull request podria ayudar<\/a><\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Por si quieres entender mas en detalle, <a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Setting_Up_Your_Project_to_Use_the_Build_Lifecycle\">aqui<\/a> unos apuntes sobre el Lifecycle de de maven. Y <a href=\"http://maven.apache.org/guides/mini/guide-maven-classloading.html\">aqui<\/a> sobre el classloading.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Luego, leyendo mas en detalle, pense que el problema era que al tranformar la interfaz a abstracta&#8230;&#8203; bueno, que me habia despistado del problema real, y a ese despiste constituyo ver, en <a href=\"https://twitter.com/nicolas_frankel/status/786202575150407680\">este tweet<\/a> porque <a href=\"https://stackoverflow.com/questions/7202616/java-abstract-interface/7202659#7202659\">las interfaces interfaces son abstractas (por defecto)<\/a>.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Y el propio <a href=\"https://twitter.com/orfjackal\">Esko Luontola<\/a> nos explica el motivo: \"pre-Java 8 JVMs support only abstract methods in interfaces (the &lt;clinit&gt; method being an exception). Retrolambda inserts the default method code to all implementing classes, thus emulating what JVM 8 does.\"<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p><a href=\"https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html\">Aqui<\/a> una explicacion mas detallada de como funcionan los Default Methods en JDK 8. Y <a href=\"https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html\">aqui<\/a> la explicación de oracle sobre \"abstract\".<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_explicacion_del_problema_real\">Explicacion del problema real<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Pero el problema, en este caso, era simplemente la limitacion de la libreria en projectos multi modulo <a href=\"https://github.com/orfjackal/retrolambda/issues/56\">aqui<\/a> y\n<a href=\"https://github.com/orfjackal/retrolambda/issues/58\">aqui<\/a> lo comentan tambien en detalle.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Una manera de resolverlo, haciendo pequeñas modificaciones en el codigo, seria implementando el metodo getIcon(String,IconSize) con el comportamiento por default en las clases del segundo modulo.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-bash\" data-lang=\"bash\">diff --git a/perspectives/src/main/java/org/hippoecm/frontend/plugins/cms/browse/section/BrowsingSectionPlugin.java b/perspectives/src/main/java/org/hippoecm/frontend/plugins/cms/browse/section/BrowsingSectionPlugin.java\nindex 99bdb0e..9b34ce1 100644\n--- a/perspectives/src/main/java/org/hippoecm/frontend/plugins/cms/browse/section/BrowsingSectionPlugin.java\n+++ b/perspectives/src/main/java/org/hippoecm/frontend/plugins/cms/browse/section/BrowsingSectionPlugin.java\n@@ -18,6 +18,7 @@\n import javax.jcr.Node;\n import javax.jcr.RepositoryException;\n\n+import org.apache.wicket.Component;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.request.resource.ResourceReference;\n import org.hippoecm.frontend.l10n.ResourceBundleModel;\n@@ -144,4 +145,10 @@\n return null;\n }\n\n+ @Override\n+ public Component getIcon(String id, IconSize size) {\n+ \treturn null;\n+ }\n+\n+\n }\ndiff --git a/perspectives/src/main/java/org/hippoecm/frontend/plugins/cms/browse/section/SearchingSectionPlugin.java b/perspectives/src/main/java/org/hippoecm/frontend/plugins/cms/browse/section/SearchingSectionPlugin.java\nindex 450712b..9d09210 100644\n--- a/perspectives/src/main/java/org/hippoecm/frontend/plugins/cms/browse/section/SearchingSectionPlugin.java\n+++ b/perspectives/src/main/java/org/hippoecm/frontend/plugins/cms/browse/section/SearchingSectionPlugin.java\n@@ -56,6 +56,7 @@\n import org.hippoecm.frontend.service.IconSize;\n import org.hippoecm.frontend.service.render.RenderPlugin;\n import org.hippoecm.frontend.skin.Icon;\n+import org.hippoecm.frontend.skin.IconProvider;\n import org.hippoecm.repository.api.HippoNodeType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -337,6 +338,11 @@\n public ResourceReference getIcon(IconSize type) {\n return null;\n }\n+\n+ @Override\n+ public Component getIcon(String id, IconSize size) {\n+ \treturn null;\n+ }\n\n private boolean hasSearchResult() {\n return collection.getType() == DocumentCollectionType.SEARCHRESULT;<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"__proximos_pasos\">¿Proximos pasos?<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/teras\">Teras<\/a> y <a href=\"https://github.com/orfjackal\">Orfjackal<\/a>, ¿porque el PR 101 no modifica estas clases para hacer ese cambio? ¿Quizas no lo hace porque ya existe un metodo con ese nombre, aunque no con el mismo numero de paramtros?<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"__y_que_pasa_con_la_compilacion_retrolambda_de_hippocms\">¿Y que pasa con la compilacion retrolambda de hippocms?<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Aun nos quedaba algun error por resolver&#8230;&#8203; metodo estaticos&#8230;&#8203;<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-bash\" data-lang=\"bash\">[ERROR] hippo-cms/workflow/frontend/src/main/java/org/hippoecm/frontend/plugins/reviewedactions/list/ReviewedActionsListColumnProviderPlugin.java:[72,38] error: cannot find symbol\n[ERROR] symbol: method of(Calendar)\n[ERROR] location: interface DateTimePrinter\n[ERROR] hippo-cms/workflow/frontend/src/main/java/org/hippoecm/frontend/plugins/reviewedactions/list/ReviewedActionsListColumnProviderPlugin.java:[79,38] error: cannot find symbol\n[ERROR] symbol: method of(Calendar)\n[ERROR] location: interface DateTimePrinter<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Static methods on interfaces are backported by moving the static methods to a companion class (interface name + \"$\"), and by changing all methods calls to call the new method location.[1]<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>En este caso la solucion temporal es cambiar los import en las clases del segundo modulo, a la clase companion.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-bash\" data-lang=\"bash\">diff --git a/workflow/frontend/src/main/java/org/hippoecm/frontend/plugins/reviewedactions/RequestsView.java b/workflow/frontend/src/main/java/org/hippoecm/frontend/plugins/reviewedactions/RequestsView.java\nindex 5a97066..ab938b7 100644\n--- a/workflow/frontend/src/main/java/org/hippoecm/frontend/plugins/reviewedactions/RequestsView.java\n+++ b/workflow/frontend/src/main/java/org/hippoecm/frontend/plugins/reviewedactions/RequestsView.java\n@@ -41,7 +41,7 @@\n import org.hippoecm.frontend.plugin.IPluginContext;\n import org.hippoecm.frontend.plugins.reviewedactions.model.Request;\n import org.hippoecm.frontend.plugins.reviewedactions.model.RequestModel;\n-import org.hippoecm.frontend.plugins.standards.datetime.DateTimePrinter;\n+import org.hippoecm.frontend.plugins.standards.datetime.DateTimePrinter$;\n import org.hippoecm.frontend.plugins.standards.icon.HippoIcon;\n import org.hippoecm.frontend.session.UserSession;\n import org.hippoecm.frontend.skin.Icon;\n@@ -110,7 +110,7 @@\n String state = request.getState();\n\n final String parameter = schedule != null ?\n- DateTimePrinter.of(schedule).appendDST().print(FormatStyle.FULL) : \"??\";\n+ DateTimePrinter$.of(schedule).appendDST().print(FormatStyle.FULL) : \"??\";\n return new StringResourceModel(\"state-\" + state, this, null, \"unknown\", parameter);\n }<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_notas_finales\">Notas finales<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Si lo que has usado en tu proyecto con JDK 8 son las APIs de streaming, puedes usar <a href=\"https://sourceforge.net/projects/streamsupport/\">esto<\/a>.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Aqui un <a href=\"https://en.wikipedia.org/wiki/Java_backporting_tools\">poco de historia<\/a>.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_bola_extra\">Bola extra<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"http://stackoverflow.com/questions/31160831/android-groovy-android-annotation\">Groovy Android y APT<\/a><\/p>\n<\/div>\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2016/10/groovy-thymelaf.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2016/10/groovy-thymelaf.html",
            "date_published": "2016-10-12T00:00:00+02:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "jvm",   "groovy",   "thymeleaf3",   "springboot" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_groovy\">Groovy<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The first time i heard about Groovy, was in late 2010, early 2011. I used Freemind mind mapping, and then version 0.9 was about to release, with support for groovy, what was that?, It took some time using Freemind, and I said, if people use it, maybe could be interesting.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>A dynamic language like Javascript, which could interact with the mental maps, making them dynamic too? To create nodes, relations between them, in a dynamic way?. I tried it, I did some things: a script that compiled the ticket Fogbugz and show me drawn as nodes in the mental map.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_thymeleaf\">Thymeleaf<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Thymeleaf templating system is a server, both as standalone web. Its main objective is to provide a template system (not strictly HTML), natural and elegant that also function as static prototypes, enabling closer collaboration in development teams.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>In addition, modules Spring Framework, a series of integrations with their favorite tools, and the ability to connect their own functionality, thymeleaf is ideal for HTML5 web development in the JVM and more.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_why_no_mix_it\">Why no mix it?<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>One of the new features of thymeleaf 3 is still more design decouple HTML from data binding.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>In <a href=\"https://github.com/thymeleaf/thymeleaf/issues/465\">this link<\/a> count as work.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>The question is, if I can lay something like<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-html\" data-lang=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n &lt;body&gt;\n &lt;table id=\"usersTable\"&gt;\n &lt;tr&gt;\n &lt;td class=\"username\"&gt;Jeremy Grapefruit&lt;/td&gt;\n &lt;td class=\"usertype\"&gt;Normal User&lt;/td&gt;\n &lt;/tr&gt;\n &lt;tr&gt;\n &lt;td class=\"username\"&gt;Alice Watermelon&lt;/td&gt;\n &lt;td class=\"usertype\"&gt;Administrator&lt;/td&gt;\n &lt;/tr&gt;\n &lt;/table&gt;\n &lt;/body&gt;\n&lt;/html&gt;<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>I can define so, as it will generate the binding of the fields&#8230;&#8203;<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;?xml version=\"1.0\"?&gt;\n&lt;thlogic&gt;\n &lt;attr sel=\"#usersTable\" th:remove=\"all-but-first\"&gt;\n &lt;attr sel=\"/tr[0]\" th:each=\"user : ${users}\"&gt;\n &lt;attr sel=\"td.username\" th:text=\"${user.name}\" /&gt;\n &lt;attr sel=\"td.usertype\" th:text=\"#{|user.type.${user.type}|}\" /&gt;\n &lt;/attr&gt;\n &lt;/attr&gt;\n&lt;/thlogic&gt;<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>then, why not write in groovy<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">thlogic {\n attr(sel:'#usersTable', 'th:remove':'all-but-first') {\n attr(sel:'/tr[0]', 'th:each':'user : ${users}') {\n attr(sel:'td.username', 'th:text':'${user.name}')\n attr(sel:'td.usertype', 'th:text':'${user.type}')\n }\n }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p><a href=\"http://forum.thymeleaf.org/Thymeleaf-and-groovy-td4029599.html\">Here is<\/a> the explanation in thymeleaf&#8217;s forum.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>And if we can made this, we could made <a href=\"http://groovy-lang.org/processing-xml.html#_markupbuilder\">this one<\/a><\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">thlogic {\n attr(sel:'#usersTable', 'th:remove':'all-but-first') {\n attr(sel:'/tr[0]', 'th:each':'user : ${users}') {\n\t\t\t(1..3).each { n -&gt;\t\t\t<i class=\"conum\" data-value=\"1\"><\/i><b>(1)<\/b>\n\t\t\t\tattr(sel:'td.username', 'th:text':'${user.name}')\n\t\t\t\tattr(sel:'td.usertype', 'th:text':'${user.type}')\n\t\t\t}\n }\n }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"><\/i><b>1<\/b><\/td>\n<td>Include the logic in xml generation&#8230;&#8203;<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_one_example_with_all_mixed\">One example with all mixed<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In <a href=\"https://github.com/josejuanmontiel/adorable-avatar\">this project<\/a> i mount an example of use of thymeleaf 3 in a springboot project with groovy as the main language, and <a href=\"https://github.com/josejuanmontiel/dynamic-rest-template\">here<\/a> took out the rest of access to services, and wanted to try something else was jitpack to generate libraries git projects, on-demand.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-gradle\" data-lang=\"gradle\">\tmaven { url \"https://jitpack.io\" }\n\tcompile 'com.github.josejuanmontiel:dynamic-rest-template:-SNAPSHOT'<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_next_steps\">Next steps<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Many applications are the type, called a rest services and exposure in the view. Why not make an application front, in the back? I thought it would be quite interesting, that in the definition of binding in groovy could add information about the rest services to be consulted, to fill the data binding in the rendering phase.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">rest{\n\turl{\n\t\thttp://...\n\t}\n\tbinding {\n\t\tuser.name=response.body.user\n\t\tuser.type=response.body.type\n\t\t...\n\t}\n}\nthlogic {\n attr(sel:'#usersTable', 'th:remove':'all-but-first') {\n attr(sel:'/tr[0]', 'th:each':'user : ${users}') {\n attr(sel:'td.username', 'th:text':'${user.name}')\n attr(sel:'td.usertype', 'th:text':'${user.type}')\n }\n }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>And seeing the <a href=\"https://twitter.com/nicolas_frankel/status/760441910272135168\">tweet<\/a> Nicolas Frankel, test values (maximum and minimum) of each of the fields are indicated binding and that during development, are that the fake data used to lay out the project, while services are mounted.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">rest{\n\turl{ ... }\n\tbinding { ... }\n\ttest {\n\t\tuser.name=[user1, user2, user3]\n\t\tuser.type=[admin, normal, editor]\n\t}\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>For all this, metaprogramming &#8230;&#8203; in groovy. To see what ends the idea.<\/p>\n<\/div>\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2016/10/groovy-thymelaf.es.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2016/10/groovy-thymelaf.es.html",
            "date_published": "2016-10-12T00:00:00+02:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "jvm",   "groovy",   "thymeleaf3",   "springboot" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_groovy\">Groovy<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>La primera vez que hoy hablar de Groovy fue a finales de 2010, principios de 2011. Yo usaba Freemind para hacer mapas mentales, y por aquel entonces la version 0.9 estaba a punto de salir, con soporte para groovy, ¿que era eso?, llevaba ya algun tiempo usando Freemind, y me dije: si esta gente lo usa, lo mismo es interesante.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>¿Un lenguaje dinamico como Javascript, que podia interactuar con los mapas mentales, haciendolos dinamicos tambien? ¿Crear nodos, relaciones entre ellos, de una manera dinamica?. Lo probe, he hice algunas cositas: un script que recopilaba los ticket de fogbugz y me los mostaba dibujados como nodos del mapa mental.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_thymeleaf\">Thymeleaf<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Thymeleaf es un sistema de templating de servidor, tanto web como standalone. Su principal objetivo es brindar un sistema de plantillas (no estrictamente HTML), natural y elegante que ademas funcione como prototipos estáticos, lo que permite una colaboración más estrecha en los equipos de desarrollo.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Ademas, con módulos de Spring Framework, una serie de integraciones con sus herramientas favoritas, y la capacidad de conectar su propia funcionalidad, Thymeleaf es ideal para el desarrollo web HTML5 en la JVM y mucho mas.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"__porque_no_mezclarlo\">¿Porque no mezclarlo?<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Una de las caracteristicas nuevas de Thymeleaf 3, es que todavia desacoplan mas el diseño del HTML, del binding de datos.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>En <a href=\"https://github.com/thymeleaf/thymeleaf/issues/465\">este link<\/a> cuentan como funciona.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>La cuestion es, que si puedo maquetar algo asi<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-html\" data-lang=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n &lt;body&gt;\n &lt;table id=\"usersTable\"&gt;\n &lt;tr&gt;\n &lt;td class=\"username\"&gt;Jeremy Grapefruit&lt;/td&gt;\n &lt;td class=\"usertype\"&gt;Normal User&lt;/td&gt;\n &lt;/tr&gt;\n &lt;tr&gt;\n &lt;td class=\"username\"&gt;Alice Watermelon&lt;/td&gt;\n &lt;td class=\"usertype\"&gt;Administrator&lt;/td&gt;\n &lt;/tr&gt;\n &lt;/table&gt;\n &lt;/body&gt;\n&lt;/html&gt;<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>puedo definir asi, como se va a generar el binding de los campos&#8230;&#8203;<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;?xml version=\"1.0\"?&gt;\n&lt;thlogic&gt;\n &lt;attr sel=\"#usersTable\" th:remove=\"all-but-first\"&gt;\n &lt;attr sel=\"/tr[0]\" th:each=\"user : ${users}\"&gt;\n &lt;attr sel=\"td.username\" th:text=\"${user.name}\" /&gt;\n &lt;attr sel=\"td.usertype\" th:text=\"#{|user.type.${user.type}|}\" /&gt;\n &lt;/attr&gt;\n &lt;/attr&gt;\n&lt;/thlogic&gt;<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>entonces, porque no escribirlo en groovy<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">thlogic {\n attr(sel:'#usersTable', 'th:remove':'all-but-first') {\n attr(sel:'/tr[0]', 'th:each':'user : ${users}') {\n attr(sel:'td.username', 'th:text':'${user.name}')\n attr(sel:'td.usertype', 'th:text':'${user.type}')\n }\n }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p><a href=\"http://forum.thymeleaf.org/Thymeleaf-and-groovy-td4029599.html\">Aqui esta<\/a> la explicacion en el foro de thymeleaf.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Y si podemos hacer eso, podriamos hacer <a href=\"http://groovy-lang.org/processing-xml.html#_markupbuilder\">esto<\/a><\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">thlogic {\n attr(sel:'#usersTable', 'th:remove':'all-but-first') {\n attr(sel:'/tr[0]', 'th:each':'user : ${users}') {\n\t\t\t(1..3).each { n -&gt;\t\t\t<i class=\"conum\" data-value=\"1\"><\/i><b>(1)<\/b>\n\t\t\t\tattr(sel:'td.username', 'th:text':'${user.name}')\n\t\t\t\tattr(sel:'td.usertype', 'th:text':'${user.type}')\n\t\t\t}\n }\n }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"><\/i><b>1<\/b><\/td>\n<td>Incluir logica en la generacion del Xml&#8230;&#8203;<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_un_ejemplo_con_todo_junto\">Un ejemplo con todo junto<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>En <a href=\"https://github.com/josejuanmontiel/adorable-avatar\">este<\/a> monte un ejemplo de uso de thymeleaf 3, en un proyecto springboot con groovy como lenguaje principal, y <a href=\"https://github.com/josejuanmontiel/dynamic-rest-template\">aqui<\/a> extraje la parte de acceso a servicios rest, y otra cosa que queria probar era jitpack, para generar librerias de projectos git, on-demand.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-gradle\" data-lang=\"gradle\">\tmaven { url \"https://jitpack.io\" }\n\tcompile 'com.github.josejuanmontiel:dynamic-rest-template:-SNAPSHOT'<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_proximos_pasos\">Proximos pasos<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Muchas aplicaciones son del tipo, llamada a servicios rest, y exposicion en la vista. ¿Porque no hacer una aplicacion front, en el back? Pense que seria bastante interesante, que en esa definicion de binding en groovy se pudiera añadir informacion sobre los servicios rest que se van a consultar, para rellenar los datos de ese binding en la fase de renderizado.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">rest{\n\turl{\n\t\thttp://...\n\t}\n\tbinding {\n\t\tuser.name=response.body.user\n\t\tuser.type=response.body.type\n\t\t...\n\t}\n}\nthlogic {\n attr(sel:'#usersTable', 'th:remove':'all-but-first') {\n attr(sel:'/tr[0]', 'th:each':'user : ${users}') {\n attr(sel:'td.username', 'th:text':'${user.name}')\n attr(sel:'td.usertype', 'th:text':'${user.type}')\n }\n }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Y al ver el <a href=\"https://twitter.com/nicolas_frankel/status/760441910272135168\">tweet<\/a> de Nicolas Frankel, que se indiquen los valores de prueba (maximos y minimos) de cada uno de los campos del binding y que durante desarrollo, sean eso los datos fake que se usen para maquetar el proyecto, mientras se montan los servicios.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlightjs highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">rest{\n\turl{ ... }\n\tbinding { ... }\n\ttest {\n\t\tuser.name=[user1, user2, user3]\n\t\tuser.type=[admin, normal, editor]\n\t}\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>Para todo esto, metaprogracion&#8230;&#8203; en groovy. A ver en que termina la idea.<\/p>\n<\/div>\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2016/08/blog-jbake-gradle.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2016/08/blog-jbake-gradle.html",
            "date_published": "2016-08-25T00:00:00+02:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "jvm",   "groovy",   "blog",   "github",   "jbake",   "gradle" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_it_s_time_to_start_a_blog_about_programming\">It&#8217;s time to start a blog about programming<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The truth is that as time passes, you realize that sharing is winning. Some, are given as much before, but although\nI already intuited, have had to spend over 10 years in the art of programming to realize. Share is to win,\nis to know other opinions, ways of doing things and of course, meet other people&#8230;&#8203; they call networking.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>I already had a <a href=\"http://accreativos.blogspot.com.es/\">blog<\/a> is more a list of things you&#8217;re finding and take note to\nremember, that really a way to share information and comment on it. Then came the\n<a href=\"http://twitter.com/accreativos\">twitter<\/a> but in the end, it is a mixture of retweets, and little original information.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>So, why not, a serious blog, like those used to reading these, those where people end up leaving\na lot of comments, those that you add to your RSS reader to be aware of what is said in them,\nAnd if you learn something mounting it, because what else can you ask for.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Therefore, items that will use this blog are:<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>English (Spanish)<\/p>\n<\/li>\n<li>\n<p>GitHub Pages<\/p>\n<\/li>\n<li>\n<p>AsciiDoctor<\/p>\n<\/li>\n<li>\n<p>Groovy<\/p>\n<\/li>\n<li>\n<p>Jbake<\/p>\n<\/li>\n<li>\n<p>Gradle<\/p>\n<\/li>\n<li>\n<p>Freemarker (Thymeleaf)<\/p>\n<\/li>\n<li>\n<p>Discus (Discourse)<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<div class=\"paragraph\">\n<p>We see you in a bit of detail each point.<\/p>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_english\">English<\/h3>\n<div class=\"paragraph\">\n<p>The first thing I take advantage of it to improve my English. So, although I write in Spanish, my native language,\npublishes in English (and I assume that since I write in Spanish, these also the publicare, and I&#8217;ll see as attachment).<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_github_pages\">Github Pages<\/h3>\n<div class=\"paragraph\">\n<p>GitHub for some time now began to publish static pages allow for all your projects done. If you are looking for\n<a href=\"https://pages.github.com\" class=\"bare\">https://pages.github.com<\/a> [Github Pages] will see extensive information, besides, many people already using github\ntapped to mount functionality for small static sites.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Basically it is that everything that you upload to the branch gh-pages of your github repository, will be visible in the domain\n<a href=\"http://username.github.io/repo/file\" class=\"bare\">http://username.github.io/repo/file<\/a> where username is your user github, repo is the name of the repo where these\ngoing up files to the branch gh-pages and file is the file that if an index.html the browser displays,\nand the same for css and js with what you already have ready the web.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>They also provide a default generator, <a href=\"https://help.github.com/articles/about-github-pages-and-jekyll/\">Jekyll<\/a>\nto generate these static pages from a text in markdown format, but we will not use it,\nWe see the alternative.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_asciidoctor\">AsciiDoctor<\/h3>\n<div class=\"paragraph\">\n<p>We prefer to use something that is between, markdown and latex, and that is called <a href=\"http://asciidoctor.org/\">AsciiDoctor<\/a> that\ntrue also this <a href=\"http://asciidoctor.org/news/2014/02/04/github-asciidoctor-0.1.4-upgrade-5-things-to-know/\">supported<\/a>\nby GitHub.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_groovy\">Groovy<\/h3>\n<div class=\"paragraph\">\n<p>Like my native language is Spanish, my native language is this in Java programming, and as is\nlearn, and I have a few years playing with groovy, and I will not miss the opportunity to mount the blog using it.\nI will tell on another occasion, as I started in this groovy, and what are the places where I learn.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_jbake\">Jbake<\/h3>\n<div class=\"paragraph\">\n<p>And we have said that we were not going to use <a href=\"https://jekyllrb.com/\">Jekyll<\/a> that is done in Ruby, because what we mola is\nGroovy;) But we need our written txt in AsciiDoctor be transformed into HTML (or XML we&#8217;ll see how)\nand above all that what we write is inserted in those HTML, we will use <a href=\"http://jbake.org/\">Jbake<\/a>.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_gradle\">Gradle<\/h3>\n<div class=\"paragraph\">\n<p>But hey, this needs to be automated, at the end, there are a number of steps, why not use Gradle, as well\n<a href=\"http://melix.github.io/blog/2014/02/hosting-jbake-github.html\">the creator<\/a> of\n<a href=\"https://github.com/jbake-org/jbake-gradle-plugin\">plugin<\/a>, it is the perfect combination.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>A couple of notes, as it has been somewhat outdated &#8230;&#8203; <a href=\"http://www.orany.cz/blog/2014/10/17/migrated-to-jbake.html\">that\nOrnay write time ago<\/a> and which faces plugin to upload the pages to the branch, it has also been actualized,\n<a href=\"https://plugins.gradle.org/plugin/org.ajoberstar.github-pages\">aqui this<\/a>.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_freemarker_thymeleaf\">Freemarker (Thymeleaf)<\/h3>\n<div class=\"paragraph\">\n<p>And this tool is able to use different templating systems (specifically start with Freemarker, and more\nI later migrate to Thymeleaf) to inject the values ​​obtained in asciidoctor txt, along with some\nmore variables to help build a blogging system that does not have anything envy to Jeklly, Wordpress or\nwhat is put forward.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_disqus_discourse\">Disqus (Discourse)<\/h3>\n<div class=\"paragraph\">\n<p>But finally, a system without the possibility of blog comments, don&#8217;t make sense. To do all these i used\n<a href=\"https://disqus.com/\">Discus<\/a> that integrate perfectly with a line (almost). As an option, I will try to migrate to\n<a href=\"https://www.discourse.org/\">Discourse<\/a> but that will come later.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_extra_ball_analytics\">Extra Ball. Analytics.<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>As extra ball, remember to add the analitica.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Keep on Groovying!<\/p>\n<\/div>\n<\/div>\n<\/div>"
        }, 
        {
            "id": "https://josejuanmontiel.github.io/blog/2016/08/blog-jbake-gradle.es.html",
            
           
            "url": "https://josejuanmontiel.github.io/blog/2016/08/blog-jbake-gradle.es.html",
            "date_published": "2016-08-25T00:00:00+02:00",
            
            "author" : "Jose Juan Montiel",
            "tags": [ "jvm",   "groovy",   "blog",   "github",   "jbake",   "gradle" ],
            "content_html" : "<div class=\"sect1\">\n<h2 id=\"_es_hora_de_empezar_un_blog_sobre_programacion\">Es hora de empezar un blog sobre programacion<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>La verdad es que conforme pasa el tiempo, te das cuenta que compartir es ganar. Algunos se dan cuanta antes, pero aunque\nyo ya lo intuia, han tenido que pasar mas de 10 años en esto de la programacion para darme cuenta. Compartir es ganar,\nes conocer otras opiniones, maneras de hacer las cosas y como no, conocer a otras personas&#8230;&#8203; networking le llaman.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Yo ya tenia un <a href=\"http://accreativos.blogspot.com.es/\">blog<\/a>, es mas una lista de cosas que te vas encontrando y apuntas\npara tener en algugn sitio, que realmente una manera de compartir informacion y opinar sobre ella. Luego llego el\n<a href=\"http://twitter.com/accreativos\">twitter<\/a> pero al final, es una mezcla de retweets, y poca informacion original.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Asi que, por que no, un blog serio, como esos que estas acostumbrado a leer, de esos donde la gente termina dejando\nuna gran cantidad de comentarios, de esos que añades a tu lector RSS para estar al tanto de lo que se comenta en ellos,\ny si ademas aprendes algo al montandolo, pues que mas se puede pedir.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Por tanto, los elementos que voy a usar para este blog son:<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Ingles (Español)<\/p>\n<\/li>\n<li>\n<p>GitHub Pages<\/p>\n<\/li>\n<li>\n<p>AsciiDoctor<\/p>\n<\/li>\n<li>\n<p>Groovy<\/p>\n<\/li>\n<li>\n<p>Jbake<\/p>\n<\/li>\n<li>\n<p>Gradle<\/p>\n<\/li>\n<li>\n<p>Freemarker (Thymeleaf)<\/p>\n<\/li>\n<li>\n<p>Discus (Discourse)<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<div class=\"paragraph\">\n<p>Vemos en un poco en detalle cada punto.<\/p>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_ingles\">Ingles<\/h3>\n<div class=\"paragraph\">\n<p>Lo primero que voy aprovechar es para mejorar mi ingles. Asi que, aunque lo redacte en español, mi lengua nativa, lo\npublicare en ingles (y supongo que ya que los redacto en español, estos tambien los publicare, ya vere como lo implemento).<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_github_pages\">Github Pages<\/h3>\n<div class=\"paragraph\">\n<p>Ya hace algun tiempo que GitHub empezo a permitir publicar paginas estaticas para todos sus proyectos. Si buscas por\n<a href=\"https://pages.github.com\">Github Pages<\/a> podras ver amplia informacion al respecto, ademas, mucha gente que usa ya github\na aprovechado la funcionalidad para montar pequeños sites estaticos.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Basicamente es que, todo lo que subas a la rama gh-pages de tu repositorio github, sera visible en el dominio\n<a href=\"http://username.github.io/repo/file\" class=\"bare\">http://username.github.io/repo/file<\/a> donde username, es tu usuario de github, repo es el nombre del repo donde estas\nsubiendo los ficheros a la rama gh-pages y file, es el fichero, que si es un index.html el navegador lo visualiza,\ny lo mismo para los css y js, con lo que ya tienes listo la web.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Ademas, proveen de un generador por defecto, <a href=\"https://help.github.com/articles/about-github-pages-and-jekyll/\">Jekyll<\/a>,\npara generar esas paginas estaticas, a partir de un texto en formato markdown, pero nosotros no vamos a usarlo,\nveremos la alternativa.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_asciidoctor\">AsciiDoctor<\/h3>\n<div class=\"paragraph\">\n<p>Preferimos usar algo que esta entre, markdown y latex, y eso se llama <a href=\"http://asciidoctor.org/\">AsciiDoctor<\/a> que por\ncierto tambien esta <a href=\"http://asciidoctor.org/news/2014/02/04/github-asciidoctor-0.1.4-upgrade-5-things-to-know/\">soportado<\/a>\npor GitHub.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_groovy\">Groovy<\/h3>\n<div class=\"paragraph\">\n<p>Igual que mi lenguaje nativo es el español, mi lenguaje nativo en esto de la programacion es Java, y como se trata de\naprender, ya llevo unos años jugando con groovy, y no voy a desaprovechar la oportunidad para montar el blog usandolo.\nYa contare en otra ocasion, como me inicie en esto de groovy, y cuales son los lugares donde yo, aprendo.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_jbake\">Jbake<\/h3>\n<div class=\"paragraph\">\n<p>Y ya hemos dicho que no ibamos a usar <a href=\"https://jekyllrb.com/\">Jekyll<\/a> que esta hecho en Ruby, porque lo que nos mola es\nGroovy ;) Pero necesitamos que nuestros txt escritos en AsciiDoctor se transformen en HTML (o XML ya veremos como),\ny sobre todo que lo que escribimos se inserte en esos HTML, para ello usaremos <a href=\"http://jbake.org/\">Jbake<\/a>.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_gradle\">Gradle<\/h3>\n<div class=\"paragraph\">\n<p>Pero bueno, esto necesita automatizarse, al final son una serie de pasos que porque no usar gradle, y como bien\n<a href=\"http://melix.github.io/blog/2014/02/hosting-jbake-github.html\">cuenta<\/a> el creador del\n<a href=\"https://github.com/jbake-org/jbake-gradle-plugin\">plugin<\/a>, es la combinacion perfecta.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Un par de apuntes, pues ha quedado algo desactualizado&#8230;&#8203; <a href=\"http://www.orany.cz/blog/2014/10/17/migrated-to-jbake.html\">que\nhace Ornay<\/a> y el plugin que se encara de subir las paginas a la rama, tambien ha sido actualido,\n<a href=\"https://plugins.gradle.org/plugin/org.ajoberstar.github-pages\">aqui esta<\/a>.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_freemarker_thymeleaf\">Freemarker (Thymeleaf)<\/h3>\n<div class=\"paragraph\">\n<p>Y esta herramienta es capaz de usar distintos sistemas de templating (en concreto empezaremos con Freemarker, y mas\nadelante lo migraremos a Thymeleaf) para inyectarles los valores obtenidos del txt en asciidoctor, junto con algunas\nvariables mas que ayudaran a construir un sistema de blogging que no tiene que enviadiar nada a Jeklly, Wordpress o\nlo que se ponga por delante.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_disqus_discourse\">Disqus (Discourse)<\/h3>\n<div class=\"paragraph\">\n<p>Pero por ultimo, que es un sistema de blog sin la posibilidad de comentarios, pues nada. Para ello todos estos sistmas\nusan <a href=\"https://disqus.com/\">Discus<\/a> que se intera perfectamente con una linea (casi). Como opcion, intentare migrar a\n<a href=\"https://www.discourse.org/\">Discourse<\/a> pero eso sera mas adelante.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect1\">\n<h2 id=\"_bola_extra_analitica\">Bola extra. Analitica.<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Como bola extra, recordar añadir la analitica.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Keep on Groovying!<\/p>\n<\/div>\n<\/div>\n<\/div>"
        }
    ]
}
